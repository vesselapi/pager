'use strict';
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = 'vendor-chunks/postgres@3.4.3';
exports.ids = ['vendor-chunks/postgres@3.4.3'];
exports.modules = {
  /***/ '(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/bytes.js':
    /*!**********************************************************************************!*\
  !*** ../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/bytes.js ***!
  \**********************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst size = 256;\nlet buffer = Buffer.allocUnsafe(size);\nconst messages = "BCcDdEFfHPpQSX".split("").reduce((acc, x)=>{\n    const v = x.charCodeAt(0);\n    acc[x] = ()=>{\n        buffer[0] = v;\n        b.i = 5;\n        return b;\n    };\n    return acc;\n}, {});\nconst b = Object.assign(reset, messages, {\n    N: String.fromCharCode(0),\n    i: 0,\n    inc (x) {\n        b.i += x;\n        return b;\n    },\n    str (x) {\n        const length = Buffer.byteLength(x);\n        fit(length);\n        b.i += buffer.write(x, b.i, length, "utf8");\n        return b;\n    },\n    i16 (x) {\n        fit(2);\n        buffer.writeUInt16BE(x, b.i);\n        b.i += 2;\n        return b;\n    },\n    i32 (x, i) {\n        if (i || i === 0) {\n            buffer.writeUInt32BE(x, i);\n            return b;\n        }\n        fit(4);\n        buffer.writeUInt32BE(x, b.i);\n        b.i += 4;\n        return b;\n    },\n    z (x) {\n        fit(x);\n        buffer.fill(0, b.i, b.i + x);\n        b.i += x;\n        return b;\n    },\n    raw (x) {\n        buffer = Buffer.concat([\n            buffer.subarray(0, b.i),\n            x\n        ]);\n        b.i = buffer.length;\n        return b;\n    },\n    end (at = 1) {\n        buffer.writeUInt32BE(b.i - at, at);\n        const out = buffer.subarray(0, b.i);\n        b.i = 0;\n        buffer = Buffer.allocUnsafe(size);\n        return out;\n    }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (b);\nfunction fit(x) {\n    if (buffer.length - b.i < x) {\n        const prev = buffer, length = prev.length;\n        buffer = Buffer.allocUnsafe(length + (length >> 1) + x);\n        prev.copy(buffer);\n    }\n}\nfunction reset() {\n    b.i = 0;\n    return b;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Bvc3RncmVzQDMuNC4zL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvYnl0ZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE1BQU1BLE9BQU87QUFDYixJQUFJQyxTQUFTQyxPQUFPQyxXQUFXLENBQUNIO0FBRWhDLE1BQU1JLFdBQVcsaUJBQWlCQyxLQUFLLENBQUMsSUFBSUMsTUFBTSxDQUFDLENBQUNDLEtBQUtDO0lBQ3ZELE1BQU1DLElBQUlELEVBQUVFLFVBQVUsQ0FBQztJQUN2QkgsR0FBRyxDQUFDQyxFQUFFLEdBQUc7UUFDUFAsTUFBTSxDQUFDLEVBQUUsR0FBR1E7UUFDWkUsRUFBRUMsQ0FBQyxHQUFHO1FBQ04sT0FBT0Q7SUFDVDtJQUNBLE9BQU9KO0FBQ1QsR0FBRyxDQUFDO0FBRUosTUFBTUksSUFBSUUsT0FBT0MsTUFBTSxDQUFDQyxPQUFPWCxVQUFVO0lBQ3ZDWSxHQUFHQyxPQUFPQyxZQUFZLENBQUM7SUFDdkJOLEdBQUc7SUFDSE8sS0FBSVgsQ0FBQztRQUNIRyxFQUFFQyxDQUFDLElBQUlKO1FBQ1AsT0FBT0c7SUFDVDtJQUNBUyxLQUFJWixDQUFDO1FBQ0gsTUFBTWEsU0FBU25CLE9BQU9vQixVQUFVLENBQUNkO1FBQ2pDZSxJQUFJRjtRQUNKVixFQUFFQyxDQUFDLElBQUlYLE9BQU91QixLQUFLLENBQUNoQixHQUFHRyxFQUFFQyxDQUFDLEVBQUVTLFFBQVE7UUFDcEMsT0FBT1Y7SUFDVDtJQUNBYyxLQUFJakIsQ0FBQztRQUNIZSxJQUFJO1FBQ0p0QixPQUFPeUIsYUFBYSxDQUFDbEIsR0FBR0csRUFBRUMsQ0FBQztRQUMzQkQsRUFBRUMsQ0FBQyxJQUFJO1FBQ1AsT0FBT0Q7SUFDVDtJQUNBZ0IsS0FBSW5CLENBQUMsRUFBRUksQ0FBQztRQUNOLElBQUlBLEtBQUtBLE1BQU0sR0FBRztZQUNoQlgsT0FBTzJCLGFBQWEsQ0FBQ3BCLEdBQUdJO1lBQ3hCLE9BQU9EO1FBQ1Q7UUFDQVksSUFBSTtRQUNKdEIsT0FBTzJCLGFBQWEsQ0FBQ3BCLEdBQUdHLEVBQUVDLENBQUM7UUFDM0JELEVBQUVDLENBQUMsSUFBSTtRQUNQLE9BQU9EO0lBQ1Q7SUFDQWtCLEdBQUVyQixDQUFDO1FBQ0RlLElBQUlmO1FBQ0pQLE9BQU82QixJQUFJLENBQUMsR0FBR25CLEVBQUVDLENBQUMsRUFBRUQsRUFBRUMsQ0FBQyxHQUFHSjtRQUMxQkcsRUFBRUMsQ0FBQyxJQUFJSjtRQUNQLE9BQU9HO0lBQ1Q7SUFDQW9CLEtBQUl2QixDQUFDO1FBQ0hQLFNBQVNDLE9BQU84QixNQUFNLENBQUM7WUFBQy9CLE9BQU9nQyxRQUFRLENBQUMsR0FBR3RCLEVBQUVDLENBQUM7WUFBR0o7U0FBRTtRQUNuREcsRUFBRUMsQ0FBQyxHQUFHWCxPQUFPb0IsTUFBTTtRQUNuQixPQUFPVjtJQUNUO0lBQ0F1QixLQUFJQyxLQUFLLENBQUM7UUFDUmxDLE9BQU8yQixhQUFhLENBQUNqQixFQUFFQyxDQUFDLEdBQUd1QixJQUFJQTtRQUMvQixNQUFNQyxNQUFNbkMsT0FBT2dDLFFBQVEsQ0FBQyxHQUFHdEIsRUFBRUMsQ0FBQztRQUNsQ0QsRUFBRUMsQ0FBQyxHQUFHO1FBQ05YLFNBQVNDLE9BQU9DLFdBQVcsQ0FBQ0g7UUFDNUIsT0FBT29DO0lBQ1Q7QUFDRjtBQUVBLGlFQUFlekIsQ0FBQ0EsRUFBQTtBQUVoQixTQUFTWSxJQUFJZixDQUFDO0lBQ1osSUFBSVAsT0FBT29CLE1BQU0sR0FBR1YsRUFBRUMsQ0FBQyxHQUFHSixHQUFHO1FBQzNCLE1BQU02QixPQUFPcEMsUUFDUG9CLFNBQVNnQixLQUFLaEIsTUFBTTtRQUUxQnBCLFNBQVNDLE9BQU9DLFdBQVcsQ0FBQ2tCLFNBQVVBLENBQUFBLFVBQVUsS0FBS2I7UUFDckQ2QixLQUFLQyxJQUFJLENBQUNyQztJQUNaO0FBQ0Y7QUFFQSxTQUFTYztJQUNQSixFQUFFQyxDQUFDLEdBQUc7SUFDTixPQUFPRDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9wb3N0Z3Jlc0AzLjQuMy9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL2J5dGVzLmpzP2RmNGYiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgc2l6ZSA9IDI1NlxubGV0IGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShzaXplKVxuXG5jb25zdCBtZXNzYWdlcyA9ICdCQ2NEZEVGZkhQcFFTWCcuc3BsaXQoJycpLnJlZHVjZSgoYWNjLCB4KSA9PiB7XG4gIGNvbnN0IHYgPSB4LmNoYXJDb2RlQXQoMClcbiAgYWNjW3hdID0gKCkgPT4ge1xuICAgIGJ1ZmZlclswXSA9IHZcbiAgICBiLmkgPSA1XG4gICAgcmV0dXJuIGJcbiAgfVxuICByZXR1cm4gYWNjXG59LCB7fSlcblxuY29uc3QgYiA9IE9iamVjdC5hc3NpZ24ocmVzZXQsIG1lc3NhZ2VzLCB7XG4gIE46IFN0cmluZy5mcm9tQ2hhckNvZGUoMCksXG4gIGk6IDAsXG4gIGluYyh4KSB7XG4gICAgYi5pICs9IHhcbiAgICByZXR1cm4gYlxuICB9LFxuICBzdHIoeCkge1xuICAgIGNvbnN0IGxlbmd0aCA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHgpXG4gICAgZml0KGxlbmd0aClcbiAgICBiLmkgKz0gYnVmZmVyLndyaXRlKHgsIGIuaSwgbGVuZ3RoLCAndXRmOCcpXG4gICAgcmV0dXJuIGJcbiAgfSxcbiAgaTE2KHgpIHtcbiAgICBmaXQoMilcbiAgICBidWZmZXIud3JpdGVVSW50MTZCRSh4LCBiLmkpXG4gICAgYi5pICs9IDJcbiAgICByZXR1cm4gYlxuICB9LFxuICBpMzIoeCwgaSkge1xuICAgIGlmIChpIHx8IGkgPT09IDApIHtcbiAgICAgIGJ1ZmZlci53cml0ZVVJbnQzMkJFKHgsIGkpXG4gICAgICByZXR1cm4gYlxuICAgIH1cbiAgICBmaXQoNClcbiAgICBidWZmZXIud3JpdGVVSW50MzJCRSh4LCBiLmkpXG4gICAgYi5pICs9IDRcbiAgICByZXR1cm4gYlxuICB9LFxuICB6KHgpIHtcbiAgICBmaXQoeClcbiAgICBidWZmZXIuZmlsbCgwLCBiLmksIGIuaSArIHgpXG4gICAgYi5pICs9IHhcbiAgICByZXR1cm4gYlxuICB9LFxuICByYXcoeCkge1xuICAgIGJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW2J1ZmZlci5zdWJhcnJheSgwLCBiLmkpLCB4XSlcbiAgICBiLmkgPSBidWZmZXIubGVuZ3RoXG4gICAgcmV0dXJuIGJcbiAgfSxcbiAgZW5kKGF0ID0gMSkge1xuICAgIGJ1ZmZlci53cml0ZVVJbnQzMkJFKGIuaSAtIGF0LCBhdClcbiAgICBjb25zdCBvdXQgPSBidWZmZXIuc3ViYXJyYXkoMCwgYi5pKVxuICAgIGIuaSA9IDBcbiAgICBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoc2l6ZSlcbiAgICByZXR1cm4gb3V0XG4gIH1cbn0pXG5cbmV4cG9ydCBkZWZhdWx0IGJcblxuZnVuY3Rpb24gZml0KHgpIHtcbiAgaWYgKGJ1ZmZlci5sZW5ndGggLSBiLmkgPCB4KSB7XG4gICAgY29uc3QgcHJldiA9IGJ1ZmZlclxuICAgICAgICAsIGxlbmd0aCA9IHByZXYubGVuZ3RoXG5cbiAgICBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoICsgKGxlbmd0aCA+PiAxKSArIHgpXG4gICAgcHJldi5jb3B5KGJ1ZmZlcilcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldCgpIHtcbiAgYi5pID0gMFxuICByZXR1cm4gYlxufVxuIl0sIm5hbWVzIjpbInNpemUiLCJidWZmZXIiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsIm1lc3NhZ2VzIiwic3BsaXQiLCJyZWR1Y2UiLCJhY2MiLCJ4IiwidiIsImNoYXJDb2RlQXQiLCJiIiwiaSIsIk9iamVjdCIsImFzc2lnbiIsInJlc2V0IiwiTiIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImluYyIsInN0ciIsImxlbmd0aCIsImJ5dGVMZW5ndGgiLCJmaXQiLCJ3cml0ZSIsImkxNiIsIndyaXRlVUludDE2QkUiLCJpMzIiLCJ3cml0ZVVJbnQzMkJFIiwieiIsImZpbGwiLCJyYXciLCJjb25jYXQiLCJzdWJhcnJheSIsImVuZCIsImF0Iiwib3V0IiwicHJldiIsImNvcHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/bytes.js\n',
      );

      /***/
    },

  /***/ '(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/connection.js':
    /*!***************************************************************************************!*\
  !*** ../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/connection.js ***!
  \***************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var net__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! net */ "net");\n/* harmony import */ var tls__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tls */ "tls");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! crypto */ "crypto");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! stream */ "stream");\n/* harmony import */ var perf_hooks__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! perf_hooks */ "perf_hooks");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./types.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/types.js");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/errors.js");\n/* harmony import */ var _result_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./result.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/result.js");\n/* harmony import */ var _queue_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./queue.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/queue.js");\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./query.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/query.js");\n/* harmony import */ var _bytes_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./bytes.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/bytes.js");\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Connection);\nlet uid = 1;\nconst Sync = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().S().end(), Flush = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().H().end(), SSLRequest = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().i32(8).i32(80877103).end(8), ExecuteUnnamed = Buffer.concat([\n    (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().E().str(_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N).i32(0).end(),\n    Sync\n]), DescribeUnnamed = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().D().str("S").str(_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N).end(), noop = ()=>{};\nconst retryRoutines = new Set([\n    "FetchPreparedStatement",\n    "RevalidateCachedQuery",\n    "transformAssignedExpr"\n]);\nconst errorFields = {\n    83: "severity_local",\n    86: "severity",\n    67: "code",\n    77: "message",\n    68: "detail",\n    72: "hint",\n    80: "position",\n    112: "internal_position",\n    113: "internal_query",\n    87: "where",\n    115: "schema_name",\n    116: "table_name",\n    99: "column_name",\n    100: "data type_name",\n    110: "constraint_name",\n    70: "file",\n    76: "line",\n    82: "routine" // R\n};\nfunction Connection(options, queues = {}, { onopen = noop, onend = noop, onclose = noop } = {}) {\n    const { ssl, max, user, host, port, database, parsers, transform, onnotice, onnotify, onparameter, max_pipeline, keep_alive, backoff, target_session_attrs } = options;\n    const sent = (0,_queue_js__WEBPACK_IMPORTED_MODULE_8__["default"])(), id = uid++, backend = {\n        pid: null,\n        secret: null\n    }, idleTimer = timer(end, options.idle_timeout), lifeTimer = timer(end, options.max_lifetime), connectTimer = timer(connectTimedOut, options.connect_timeout);\n    let socket = null, cancelMessage, result = new _result_js__WEBPACK_IMPORTED_MODULE_7__["default"](), incoming = Buffer.alloc(0), needsTypes = options.fetch_types, backendParameters = {}, statements = {}, statementId = Math.random().toString(36).slice(2), statementCount = 1, closedDate = 0, remaining = 0, hostIndex = 0, retries = 0, length = 0, delay = 0, rows = 0, serverSignature = null, nextWriteTimer = null, terminated = false, incomings = null, results = null, initial = null, ending = null, stream = null, chunk = null, ended = null, nonce = null, query = null, final = null;\n    const connection = {\n        queue: queues.closed,\n        idleTimer,\n        connect (query) {\n            initial = query || true;\n            reconnect();\n        },\n        terminate,\n        execute,\n        cancel,\n        end,\n        count: 0,\n        id\n    };\n    queues.closed && queues.closed.push(connection);\n    return connection;\n    async function createSocket() {\n        let x;\n        try {\n            x = options.socket ? await Promise.resolve(options.socket(options)) : new net__WEBPACK_IMPORTED_MODULE_0__.Socket();\n        } catch (e) {\n            error(e);\n            return;\n        }\n        x.on("error", error);\n        x.on("close", closed);\n        x.on("drain", drain);\n        return x;\n    }\n    async function cancel({ pid, secret }, resolve, reject) {\n        try {\n            cancelMessage = (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().i32(16).i32(80877102).i32(pid).i32(secret).end(16);\n            await connect();\n            socket.once("error", reject);\n            socket.once("close", resolve);\n        } catch (error) {\n            reject(error);\n        }\n    }\n    function execute(q) {\n        if (terminated) return queryError(q, _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection("CONNECTION_DESTROYED", options));\n        if (q.cancelled) return;\n        try {\n            q.state = backend;\n            query ? sent.push(q) : (query = q, query.active = true);\n            build(q);\n            return write(toBuffer(q)) && !q.describeFirst && !q.cursorFn && sent.length < max_pipeline && (!q.options.onexecute || q.options.onexecute(connection));\n        } catch (error) {\n            sent.length === 0 && write(Sync);\n            errored(error);\n            return true;\n        }\n    }\n    function toBuffer(q) {\n        if (q.parameters.length >= 65534) throw _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic("MAX_PARAMETERS_EXCEEDED", "Max number of parameters (65534) exceeded");\n        return q.options.simple ? (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().Q().str(q.statement.string + _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N).end() : q.describeFirst ? Buffer.concat([\n            describe(q),\n            Flush\n        ]) : q.prepare ? q.prepared ? prepared(q) : Buffer.concat([\n            describe(q),\n            prepared(q)\n        ]) : unnamed(q);\n    }\n    function describe(q) {\n        return Buffer.concat([\n            Parse(q.statement.string, q.parameters, q.statement.types, q.statement.name),\n            Describe("S", q.statement.name)\n        ]);\n    }\n    function prepared(q) {\n        return Buffer.concat([\n            Bind(q.parameters, q.statement.types, q.statement.name, q.cursorName),\n            q.cursorFn ? Execute("", q.cursorRows) : ExecuteUnnamed\n        ]);\n    }\n    function unnamed(q) {\n        return Buffer.concat([\n            Parse(q.statement.string, q.parameters, q.statement.types),\n            DescribeUnnamed,\n            prepared(q)\n        ]);\n    }\n    function build(q) {\n        const parameters = [], types = [];\n        const string = (0,_types_js__WEBPACK_IMPORTED_MODULE_5__.stringify)(q, q.strings[0], q.args[0], parameters, types, options);\n        !q.tagged && q.args.forEach((x)=>(0,_types_js__WEBPACK_IMPORTED_MODULE_5__.handleValue)(x, parameters, types, options));\n        q.prepare = options.prepare && ("prepare" in q.options ? q.options.prepare : true);\n        q.string = string;\n        q.signature = q.prepare && types + string;\n        q.onlyDescribe && delete statements[q.signature];\n        q.parameters = q.parameters || parameters;\n        q.prepared = q.prepare && q.signature in statements;\n        q.describeFirst = q.onlyDescribe || parameters.length && !q.prepared;\n        q.statement = q.prepared ? statements[q.signature] : {\n            string,\n            types,\n            name: q.prepare ? statementId + statementCount++ : ""\n        };\n        typeof options.debug === "function" && options.debug(id, string, parameters, types);\n    }\n    function write(x, fn) {\n        chunk = chunk ? Buffer.concat([\n            chunk,\n            x\n        ]) : Buffer.from(x);\n        if (fn || chunk.length >= 1024) return nextWrite(fn);\n        nextWriteTimer === null && (nextWriteTimer = setImmediate(nextWrite));\n        return true;\n    }\n    function nextWrite(fn) {\n        const x = socket.write(chunk, fn);\n        nextWriteTimer !== null && clearImmediate(nextWriteTimer);\n        chunk = nextWriteTimer = null;\n        return x;\n    }\n    function connectTimedOut() {\n        errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection("CONNECT_TIMEOUT", options, socket));\n        socket.destroy();\n    }\n    async function secure() {\n        write(SSLRequest);\n        const canSSL = await new Promise((r)=>socket.once("data", (x)=>r(x[0] === 83))) // S\n        ;\n        if (!canSSL && ssl === "prefer") return connected();\n        socket.removeAllListeners();\n        socket = tls__WEBPACK_IMPORTED_MODULE_1__.connect({\n            socket,\n            servername: net__WEBPACK_IMPORTED_MODULE_0__.isIP(socket.host) ? undefined : socket.host,\n            ...ssl === "require" || ssl === "allow" || ssl === "prefer" ? {\n                rejectUnauthorized: false\n            } : ssl === "verify-full" ? {} : typeof ssl === "object" ? ssl : {}\n        });\n        socket.on("secureConnect", connected);\n        socket.on("error", error);\n        socket.on("close", closed);\n        socket.on("drain", drain);\n    }\n    /* c8 ignore next 3 */ function drain() {\n        !query && onopen(connection);\n    }\n    function data(x) {\n        if (incomings) {\n            incomings.push(x);\n            remaining -= x.length;\n            if (remaining >= 0) return;\n        }\n        incoming = incomings ? Buffer.concat(incomings, length - remaining) : incoming.length === 0 ? x : Buffer.concat([\n            incoming,\n            x\n        ], incoming.length + x.length);\n        while(incoming.length > 4){\n            length = incoming.readUInt32BE(1);\n            if (length >= incoming.length) {\n                remaining = length - incoming.length;\n                incomings = [\n                    incoming\n                ];\n                break;\n            }\n            try {\n                handle(incoming.subarray(0, length + 1));\n            } catch (e) {\n                query && (query.cursorFn || query.describeFirst) && write(Sync);\n                errored(e);\n            }\n            incoming = incoming.subarray(length + 1);\n            remaining = 0;\n            incomings = null;\n        }\n    }\n    async function connect() {\n        terminated = false;\n        backendParameters = {};\n        socket || (socket = await createSocket());\n        if (!socket) return;\n        connectTimer.start();\n        if (options.socket) return ssl ? secure() : connected();\n        socket.on("connect", ssl ? secure : connected);\n        if (options.path) return socket.connect(options.path);\n        socket.ssl = ssl;\n        socket.connect(port[hostIndex], host[hostIndex]);\n        socket.host = host[hostIndex];\n        socket.port = port[hostIndex];\n        hostIndex = (hostIndex + 1) % port.length;\n    }\n    function reconnect() {\n        setTimeout(connect, closedDate ? closedDate + delay - perf_hooks__WEBPACK_IMPORTED_MODULE_4__.performance.now() : 0);\n    }\n    function connected() {\n        try {\n            statements = {};\n            needsTypes = options.fetch_types;\n            statementId = Math.random().toString(36).slice(2);\n            statementCount = 1;\n            lifeTimer.start();\n            socket.on("data", data);\n            keep_alive && socket.setKeepAlive && socket.setKeepAlive(true, 1000 * keep_alive);\n            const s = StartupMessage();\n            write(s);\n        } catch (err) {\n            error(err);\n        }\n    }\n    function error(err) {\n        if (connection.queue === queues.connecting && options.host[retries + 1]) return;\n        errored(err);\n        while(sent.length)queryError(sent.shift(), err);\n    }\n    function errored(err) {\n        stream && (stream.destroy(err), stream = null);\n        query && queryError(query, err);\n        initial && (queryError(initial, err), initial = null);\n    }\n    function queryError(query, err) {\n        Object.defineProperties(err, {\n            stack: {\n                value: err.stack + query.origin.replace(/.*\\n/, "\\n"),\n                enumerable: options.debug\n            },\n            query: {\n                value: query.string,\n                enumerable: options.debug\n            },\n            parameters: {\n                value: query.parameters,\n                enumerable: options.debug\n            },\n            args: {\n                value: query.args,\n                enumerable: options.debug\n            },\n            types: {\n                value: query.statement && query.statement.types,\n                enumerable: options.debug\n            }\n        });\n        query.reject(err);\n    }\n    function end() {\n        return ending || (!connection.reserved && onend(connection), !connection.reserved && !initial && !query && sent.length === 0 ? (terminate(), new Promise((r)=>socket && socket.readyState !== "closed" ? socket.once("close", r) : r())) : ending = new Promise((r)=>ended = r));\n    }\n    function terminate() {\n        terminated = true;\n        if (stream || query || initial || sent.length) error(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection("CONNECTION_DESTROYED", options));\n        clearImmediate(nextWriteTimer);\n        if (socket) {\n            socket.removeListener("data", data);\n            socket.removeListener("connect", connected);\n            socket.readyState === "open" && socket.end((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().X().end());\n        }\n        ended && (ended(), ending = ended = null);\n    }\n    async function closed(hadError) {\n        incoming = Buffer.alloc(0);\n        remaining = 0;\n        incomings = null;\n        clearImmediate(nextWriteTimer);\n        socket.removeListener("data", data);\n        socket.removeListener("connect", connected);\n        idleTimer.cancel();\n        lifeTimer.cancel();\n        connectTimer.cancel();\n        if (socket.encrypted) {\n            socket.removeAllListeners();\n            socket = null;\n        }\n        if (initial) return reconnect();\n        !hadError && (query || sent.length) && error(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection("CONNECTION_CLOSED", options, socket));\n        closedDate = perf_hooks__WEBPACK_IMPORTED_MODULE_4__.performance.now();\n        hadError && options.shared.retries++;\n        delay = (typeof backoff === "function" ? backoff(options.shared.retries) : backoff) * 1000;\n        onclose(connection, _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection("CONNECTION_CLOSED", options, socket));\n    }\n    /* Handlers */ function handle(xs, x = xs[0]) {\n        (x === 68 ? DataRow : x === 100 ? CopyData : x === 65 ? NotificationResponse : x === 83 ? ParameterStatus : x === 90 ? ReadyForQuery : x === 67 ? CommandComplete : x === 50 ? BindComplete : x === 49 ? ParseComplete : x === 116 ? ParameterDescription : x === 84 ? RowDescription : x === 82 ? Authentication : x === 110 ? NoData : x === 75 ? BackendKeyData : x === 69 ? ErrorResponse : x === 115 ? PortalSuspended : x === 51 ? CloseComplete : x === 71 ? CopyInResponse : x === 78 ? NoticeResponse : x === 72 ? CopyOutResponse : x === 99 ? CopyDone : x === 73 ? EmptyQueryResponse : x === 86 ? FunctionCallResponse : x === 118 ? NegotiateProtocolVersion : x === 87 ? CopyBothResponse : /* c8 ignore next */ UnknownMessage)(xs);\n    }\n    function DataRow(x) {\n        let index = 7;\n        let length;\n        let column;\n        let value;\n        const row = query.isRaw ? new Array(query.statement.columns.length) : {};\n        for(let i = 0; i < query.statement.columns.length; i++){\n            column = query.statement.columns[i];\n            length = x.readInt32BE(index);\n            index += 4;\n            value = length === -1 ? null : query.isRaw === true ? x.subarray(index, index += length) : column.parser === undefined ? x.toString("utf8", index, index += length) : column.parser.array === true ? column.parser(x.toString("utf8", index + 1, index += length)) : column.parser(x.toString("utf8", index, index += length));\n            query.isRaw ? row[i] = query.isRaw === true ? value : transform.value.from ? transform.value.from(value, column) : value : row[column.name] = transform.value.from ? transform.value.from(value, column) : value;\n        }\n        query.forEachFn ? query.forEachFn(transform.row.from ? transform.row.from(row) : row, result) : result[rows++] = transform.row.from ? transform.row.from(row) : row;\n    }\n    function ParameterStatus(x) {\n        const [k, v] = x.toString("utf8", 5, x.length - 1).split(_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N);\n        backendParameters[k] = v;\n        if (options.parameters[k] !== v) {\n            options.parameters[k] = v;\n            onparameter && onparameter(k, v);\n        }\n    }\n    function ReadyForQuery(x) {\n        query && query.options.simple && query.resolve(results || result);\n        query = results = null;\n        result = new _result_js__WEBPACK_IMPORTED_MODULE_7__["default"]();\n        connectTimer.cancel();\n        if (initial) {\n            if (target_session_attrs) {\n                if (!backendParameters.in_hot_standby || !backendParameters.default_transaction_read_only) return fetchState();\n                else if (tryNext(target_session_attrs, backendParameters)) return terminate();\n            }\n            if (needsTypes) {\n                initial === true && (initial = null);\n                return fetchArrayTypes();\n            }\n            initial !== true && execute(initial);\n            options.shared.retries = retries = 0;\n            initial = null;\n            return;\n        }\n        while(sent.length && (query = sent.shift()) && (query.active = true, query.cancelled))Connection(options).cancel(query.state, query.cancelled.resolve, query.cancelled.reject);\n        if (query) return; // Consider opening if able and sent.length < 50\n        connection.reserved ? !connection.reserved.release && x[5] === 73 // I\n         ? ending ? terminate() : (connection.reserved = null, onopen(connection)) : connection.reserved() : ending ? terminate() : onopen(connection);\n    }\n    function CommandComplete(x) {\n        rows = 0;\n        for(let i = x.length - 1; i > 0; i--){\n            if (x[i] === 32 && x[i + 1] < 58 && result.count === null) result.count = +x.toString("utf8", i + 1, x.length - 1);\n            if (x[i - 1] >= 65) {\n                result.command = x.toString("utf8", 5, i);\n                result.state = backend;\n                break;\n            }\n        }\n        final && (final(), final = null);\n        if (result.command === "BEGIN" && max !== 1 && !connection.reserved) return errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic("UNSAFE_TRANSACTION", "Only use sql.begin, sql.reserved or max: 1"));\n        if (query.options.simple) return BindComplete();\n        if (query.cursorFn) {\n            result.count && query.cursorFn(result);\n            write(Sync);\n        }\n        query.resolve(result);\n    }\n    function ParseComplete() {\n        query.parsing = false;\n    }\n    function BindComplete() {\n        !result.statement && (result.statement = query.statement);\n        result.columns = query.statement.columns;\n    }\n    function ParameterDescription(x) {\n        const length = x.readUInt16BE(5);\n        for(let i = 0; i < length; ++i)!query.statement.types[i] && (query.statement.types[i] = x.readUInt32BE(7 + i * 4));\n        query.prepare && (statements[query.signature] = query.statement);\n        query.describeFirst && !query.onlyDescribe && (write(prepared(query)), query.describeFirst = false);\n    }\n    function RowDescription(x) {\n        if (result.command) {\n            results = results || [\n                result\n            ];\n            results.push(result = new _result_js__WEBPACK_IMPORTED_MODULE_7__["default"]());\n            result.count = null;\n            query.statement.columns = null;\n        }\n        const length = x.readUInt16BE(5);\n        let index = 7;\n        let start;\n        query.statement.columns = Array(length);\n        for(let i = 0; i < length; ++i){\n            start = index;\n            while(x[index++] !== 0);\n            const table = x.readUInt32BE(index);\n            const number = x.readUInt16BE(index + 4);\n            const type = x.readUInt32BE(index + 6);\n            query.statement.columns[i] = {\n                name: transform.column.from ? transform.column.from(x.toString("utf8", start, index - 1)) : x.toString("utf8", start, index - 1),\n                parser: parsers[type],\n                table,\n                number,\n                type\n            };\n            index += 18;\n        }\n        result.statement = query.statement;\n        if (query.onlyDescribe) return query.resolve(query.statement), write(Sync);\n    }\n    async function Authentication(x, type = x.readUInt32BE(5)) {\n        (type === 3 ? AuthenticationCleartextPassword : type === 5 ? AuthenticationMD5Password : type === 10 ? SASL : type === 11 ? SASLContinue : type === 12 ? SASLFinal : type !== 0 ? UnknownAuth : noop)(x, type);\n    }\n    /* c8 ignore next 5 */ async function AuthenticationCleartextPassword() {\n        const payload = await Pass();\n        write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().p().str(payload).z(1).end());\n    }\n    async function AuthenticationMD5Password(x) {\n        const payload = "md5" + await md5(Buffer.concat([\n            Buffer.from(await md5(await Pass() + user)),\n            x.subarray(9)\n        ]));\n        write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().p().str(payload).z(1).end());\n    }\n    async function SASL() {\n        nonce = (await crypto__WEBPACK_IMPORTED_MODULE_2__.randomBytes(18)).toString("base64");\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().p().str("SCRAM-SHA-256" + _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N);\n        const i = _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].i;\n        write(_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].inc(4).str("n,,n=*,r=" + nonce).i32(_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].i - i - 4, i).end());\n    }\n    async function SASLContinue(x) {\n        const res = x.toString("utf8", 9).split(",").reduce((acc, x)=>(acc[x[0]] = x.slice(2), acc), {});\n        const saltedPassword = await crypto__WEBPACK_IMPORTED_MODULE_2__.pbkdf2Sync(await Pass(), Buffer.from(res.s, "base64"), parseInt(res.i), 32, "sha256");\n        const clientKey = await hmac(saltedPassword, "Client Key");\n        const auth = "n=*,r=" + nonce + "," + "r=" + res.r + ",s=" + res.s + ",i=" + res.i + ",c=biws,r=" + res.r;\n        serverSignature = (await hmac(await hmac(saltedPassword, "Server Key"), auth)).toString("base64");\n        const payload = "c=biws,r=" + res.r + ",p=" + xor(clientKey, Buffer.from(await hmac(await sha256(clientKey), auth))).toString("base64");\n        write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().p().str(payload).end());\n    }\n    function SASLFinal(x) {\n        if (x.toString("utf8", 9).split(_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N, 1)[0].slice(2) === serverSignature) return;\n        /* c8 ignore next 5 */ errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic("SASL_SIGNATURE_MISMATCH", "The server did not return the correct signature"));\n        socket.destroy();\n    }\n    function Pass() {\n        return Promise.resolve(typeof options.pass === "function" ? options.pass() : options.pass);\n    }\n    function NoData() {\n        result.statement = query.statement;\n        result.statement.columns = [];\n        if (query.onlyDescribe) return query.resolve(query.statement), write(Sync);\n    }\n    function BackendKeyData(x) {\n        backend.pid = x.readUInt32BE(5);\n        backend.secret = x.readUInt32BE(9);\n    }\n    async function fetchArrayTypes() {\n        needsTypes = false;\n        const types = await new _query_js__WEBPACK_IMPORTED_MODULE_9__.Query([\n            `\n      select b.oid, b.typarray\n      from pg_catalog.pg_type a\n      left join pg_catalog.pg_type b on b.oid = a.typelem\n      where a.typcategory = \'A\'\n      group by b.oid, b.typarray\n      order by b.oid\n    `\n        ], [], execute);\n        types.forEach(({ oid, typarray })=>addArrayType(oid, typarray));\n    }\n    function addArrayType(oid, typarray) {\n        if (!!options.parsers[typarray] && !!options.serializers[typarray]) return;\n        const parser = options.parsers[oid];\n        options.shared.typeArrayMap[oid] = typarray;\n        options.parsers[typarray] = (xs)=>(0,_types_js__WEBPACK_IMPORTED_MODULE_5__.arrayParser)(xs, parser, typarray);\n        options.parsers[typarray].array = true;\n        options.serializers[typarray] = (xs)=>(0,_types_js__WEBPACK_IMPORTED_MODULE_5__.arraySerializer)(xs, options.serializers[oid], options, typarray);\n    }\n    function tryNext(x, xs) {\n        return x === "read-write" && xs.default_transaction_read_only === "on" || x === "read-only" && xs.default_transaction_read_only === "off" || x === "primary" && xs.in_hot_standby === "on" || x === "standby" && xs.in_hot_standby === "off" || x === "prefer-standby" && xs.in_hot_standby === "off" && options.host[retries];\n    }\n    function fetchState() {\n        const query = new _query_js__WEBPACK_IMPORTED_MODULE_9__.Query([\n            `\n      show transaction_read_only;\n      select pg_catalog.pg_is_in_recovery()\n    `\n        ], [], execute, null, {\n            simple: true\n        });\n        query.resolve = ([[a], [b]])=>{\n            backendParameters.default_transaction_read_only = a.transaction_read_only;\n            backendParameters.in_hot_standby = b.pg_is_in_recovery ? "on" : "off";\n        };\n        query.execute();\n    }\n    function ErrorResponse(x) {\n        query && (query.cursorFn || query.describeFirst) && write(Sync);\n        const error = _errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.postgres(parseError(x));\n        query && query.retried ? errored(query.retried) : query && retryRoutines.has(error.routine) ? retry(query, error) : errored(error);\n    }\n    function retry(q, error) {\n        delete statements[q.signature];\n        q.retried = error;\n        execute(q);\n    }\n    function NotificationResponse(x) {\n        if (!onnotify) return;\n        let index = 9;\n        while(x[index++] !== 0);\n        onnotify(x.toString("utf8", 9, index - 1), x.toString("utf8", index, x.length - 1));\n    }\n    async function PortalSuspended() {\n        try {\n            const x = await Promise.resolve(query.cursorFn(result));\n            rows = 0;\n            x === _query_js__WEBPACK_IMPORTED_MODULE_9__.CLOSE ? write(Close(query.portal)) : (result = new _result_js__WEBPACK_IMPORTED_MODULE_7__["default"](), write(Execute("", query.cursorRows)));\n        } catch (err) {\n            write(Sync);\n            query.reject(err);\n        }\n    }\n    function CloseComplete() {\n        result.count && query.cursorFn(result);\n        query.resolve(result);\n    }\n    function CopyInResponse() {\n        stream = new stream__WEBPACK_IMPORTED_MODULE_3__.Writable({\n            autoDestroy: true,\n            write (chunk, encoding, callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().d().raw(chunk).end(), callback);\n            },\n            destroy (error, callback) {\n                callback(error);\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().f().str(error + _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N).end());\n                stream = null;\n            },\n            final (callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().c().end());\n                final = callback;\n            }\n        });\n        query.resolve(stream);\n    }\n    function CopyOutResponse() {\n        stream = new stream__WEBPACK_IMPORTED_MODULE_3__.Readable({\n            read () {\n                socket.resume();\n            }\n        });\n        query.resolve(stream);\n    }\n    /* c8 ignore next 3 */ function CopyBothResponse() {\n        stream = new stream__WEBPACK_IMPORTED_MODULE_3__.Duplex({\n            autoDestroy: true,\n            read () {\n                socket.resume();\n            },\n            /* c8 ignore next 11 */ write (chunk, encoding, callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().d().raw(chunk).end(), callback);\n            },\n            destroy (error, callback) {\n                callback(error);\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().f().str(error + _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N).end());\n                stream = null;\n            },\n            final (callback) {\n                socket.write((0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().c().end());\n                final = callback;\n            }\n        });\n        query.resolve(stream);\n    }\n    function CopyData(x) {\n        stream && (stream.push(x.subarray(5)) || socket.pause());\n    }\n    function CopyDone() {\n        stream && stream.push(null);\n        stream = null;\n    }\n    function NoticeResponse(x) {\n        onnotice ? onnotice(parseError(x)) : console.log(parseError(x)) // eslint-disable-line\n        ;\n    }\n    /* c8 ignore next 3 */ function EmptyQueryResponse() {\n    /* noop */ }\n    /* c8 ignore next 3 */ function FunctionCallResponse() {\n        errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.notSupported("FunctionCallResponse"));\n    }\n    /* c8 ignore next 3 */ function NegotiateProtocolVersion() {\n        errored(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.notSupported("NegotiateProtocolVersion"));\n    }\n    /* c8 ignore next 3 */ function UnknownMessage(x) {\n        console.error("Postgres.js : Unknown Message:", x[0]) // eslint-disable-line\n        ;\n    }\n    /* c8 ignore next 3 */ function UnknownAuth(x, type) {\n        console.error("Postgres.js : Unknown Auth:", type) // eslint-disable-line\n        ;\n    }\n    /* Messages */ function Bind(parameters, types, statement = "", portal = "") {\n        let prev, type;\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().B().str(portal + _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N).str(statement + _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N).i16(0).i16(parameters.length);\n        parameters.forEach((x, i)=>{\n            if (x === null) return _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].i32(0xFFFFFFFF);\n            type = types[i];\n            parameters[i] = x = type in options.serializers ? options.serializers[type](x) : "" + x;\n            prev = _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].i;\n            _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].inc(4).str(x).i32(_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].i - prev - 4, prev);\n        });\n        _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].i16(0);\n        return _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].end();\n    }\n    function Parse(str, parameters, types, name = "") {\n        (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().P().str(name + _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N).str(str + _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N).i16(parameters.length);\n        parameters.forEach((x, i)=>_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].i32(types[i] || 0));\n        return _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].end();\n    }\n    function Describe(x, name = "") {\n        return (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().D().str(x).str(name + _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N).end();\n    }\n    function Execute(portal = "", rows = 0) {\n        return Buffer.concat([\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().E().str(portal + _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N).i32(rows).end(),\n            Flush\n        ]);\n    }\n    function Close(portal = "") {\n        return Buffer.concat([\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().C().str("P").str(portal + _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N).end(),\n            (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().S().end()\n        ]);\n    }\n    function StartupMessage() {\n        return cancelMessage || (0,_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"])().inc(4).i16(3).z(2).str(Object.entries(Object.assign({\n            user,\n            database,\n            client_encoding: "UTF8"\n        }, options.connection)).filter(([, v])=>v).map(([k, v])=>k + _bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N + v).join(_bytes_js__WEBPACK_IMPORTED_MODULE_10__["default"].N)).z(2).end(0);\n    }\n}\nfunction parseError(x) {\n    const error = {};\n    let start = 5;\n    for(let i = 5; i < x.length - 1; i++){\n        if (x[i] === 0) {\n            error[errorFields[x[start]]] = x.toString("utf8", start + 1, i);\n            start = i + 1;\n        }\n    }\n    return error;\n}\nfunction md5(x) {\n    return crypto__WEBPACK_IMPORTED_MODULE_2__.createHash("md5").update(x).digest("hex");\n}\nfunction hmac(key, x) {\n    return crypto__WEBPACK_IMPORTED_MODULE_2__.createHmac("sha256", key).update(x).digest();\n}\nfunction sha256(x) {\n    return crypto__WEBPACK_IMPORTED_MODULE_2__.createHash("sha256").update(x).digest();\n}\nfunction xor(a, b) {\n    const length = Math.max(a.length, b.length);\n    const buffer = Buffer.allocUnsafe(length);\n    for(let i = 0; i < length; i++)buffer[i] = a[i] ^ b[i];\n    return buffer;\n}\nfunction timer(fn, seconds) {\n    seconds = typeof seconds === "function" ? seconds() : seconds;\n    if (!seconds) return {\n        cancel: noop,\n        start: noop\n    };\n    let timer;\n    return {\n        cancel () {\n            timer && (clearTimeout(timer), timer = null);\n        },\n        start () {\n            timer && clearTimeout(timer);\n            timer = setTimeout(done, seconds * 1000, arguments);\n        }\n    };\n    function done(args) {\n        fn.apply(null, args);\n        timer = null;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Bvc3RncmVzQDMuNC4zL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvY29ubmVjdGlvbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBcUI7QUFDQTtBQUNNO0FBQ0E7QUFDYTtBQUV5QztBQUM3QztBQUNKO0FBQ0Y7QUFDVztBQUNmO0FBRTFCLGlFQUFlZSxVQUFVQSxFQUFBO0FBRXpCLElBQUlDLE1BQU07QUFFVixNQUFNQyxPQUFPSCxzREFBQ0EsR0FBR0ksQ0FBQyxHQUFHQyxHQUFHLElBQ2xCQyxRQUFRTixzREFBQ0EsR0FBR08sQ0FBQyxHQUFHRixHQUFHLElBQ25CRyxhQUFhUixzREFBQ0EsR0FBR1MsR0FBRyxDQUFDLEdBQUdBLEdBQUcsQ0FBQyxVQUFVSixHQUFHLENBQUMsSUFDMUNLLGlCQUFpQkMsT0FBT0MsTUFBTSxDQUFDO0lBQUNaLHNEQUFDQSxHQUFHYSxDQUFDLEdBQUdDLEdBQUcsQ0FBQ2Qsa0RBQUNBLENBQUNlLENBQUMsRUFBRU4sR0FBRyxDQUFDLEdBQUdKLEdBQUc7SUFBSUY7Q0FBSyxHQUNwRWEsa0JBQWtCaEIsc0RBQUNBLEdBQUdpQixDQUFDLEdBQUdILEdBQUcsQ0FBQyxLQUFLQSxHQUFHLENBQUNkLGtEQUFDQSxDQUFDZSxDQUFDLEVBQUVWLEdBQUcsSUFDL0NhLE9BQU8sS0FBbUI7QUFFaEMsTUFBTUMsZ0JBQWdCLElBQUlDLElBQUk7SUFDNUI7SUFDQTtJQUNBO0NBQ0Q7QUFFRCxNQUFNQyxjQUFjO0lBQ2xCLElBQU07SUFDTixJQUFNO0lBQ04sSUFBTTtJQUNOLElBQU07SUFDTixJQUFNO0lBQ04sSUFBTTtJQUNOLElBQU07SUFDTixLQUFNO0lBQ04sS0FBTTtJQUNOLElBQU07SUFDTixLQUFNO0lBQ04sS0FBTTtJQUNOLElBQU07SUFDTixLQUFNO0lBQ04sS0FBTTtJQUNOLElBQU07SUFDTixJQUFNO0lBQ04sSUFBTSxVQUFxQixJQUFJO0FBQ2pDO0FB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QVcsQ0FBQ25QO0lBQ2xDLElBQUssSUFBSXFKLElBQUksR0FBR0EsSUFBSXJKLFFBQVFxSixJQUMxQjZGLE1BQU0sQ0FBQzdGLEVBQUUsR0FBR2tELENBQUMsQ0FBQ2xELEVBQUUsR0FBRy9OLENBQUMsQ0FBQytOLEVBQUU7SUFDekIsT0FBTzZGO0FBQ1Q7QUFFQSxTQUFTNVEsTUFBTW9HLEVBQUUsRUFBRTBLLE9BQU87SUFDeEJBLFVBQVUsT0FBT0EsWUFBWSxhQUFhQSxZQUFZQTtJQUN0RCxJQUFJLENBQUNBLFNBQ0gsT0FBTztRQUFFN04sUUFBUS9FO1FBQU1xSixPQUFPcko7SUFBSztJQUVyQyxJQUFJOEI7SUFDSixPQUFPO1FBQ0xpRDtZQUNFakQsU0FBVStRLENBQUFBLGFBQWEvUSxRQUFRQSxRQUFRLElBQUc7UUFDNUM7UUFDQXVIO1lBQ0V2SCxTQUFTK1EsYUFBYS9RO1lBQ3RCQSxRQUFReUgsV0FBV3VKLE1BQU1GLFVBQVUsTUFBTUc7UUFDM0M7SUFDRjtJQUVBLFNBQVNELEtBQUtsTCxJQUFJO1FBQ2hCTSxHQUFHOEssS0FBSyxDQUFDLE1BQU1wTDtRQUNmOUYsUUFBUTtJQUNWO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWNtZS9uZXh0anMvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Bvc3RncmVzQDMuNC4zL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvY29ubmVjdGlvbi5qcz8wOWI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBuZXQgZnJvbSAnbmV0J1xuaW1wb3J0IHRscyBmcm9tICd0bHMnXG5pbXBvcnQgY3J5cHRvIGZyb20gJ2NyeXB0bydcbmltcG9ydCBTdHJlYW0gZnJvbSAnc3RyZWFtJ1xuaW1wb3J0IHsgcGVyZm9ybWFuY2UgfSBmcm9tICdwZXJmX2hvb2tzJ1xuXG5pbXBvcnQgeyBzdHJpbmdpZnksIGhhbmRsZVZhbHVlLCBhcnJheVBhcnNlciwgYXJyYXlTZXJpYWxpemVyIH0gZnJvbSAnLi90eXBlcy5qcydcbmltcG9ydCB7IEVycm9ycyB9IGZyb20gJy4vZXJyb3JzLmpzJ1xuaW1wb3J0IFJlc3VsdCBmcm9tICcuL3Jlc3VsdC5qcydcbmltcG9ydCBRdWV1ZSBmcm9tICcuL3F1ZXVlLmpzJ1xuaW1wb3J0IHsgUXVlcnksIENMT1NFIH0gZnJvbSAnLi9xdWVyeS5qcydcbmltcG9ydCBiIGZyb20gJy4vYnl0ZXMuanMnXG5cbmV4cG9ydCBkZWZhdWx0IENvbm5lY3Rpb25cblxubGV0IHVpZCA9IDFcblxuY29uc3QgU3luYyA9IGIoKS5TKCkuZW5kKClcbiAgICAsIEZsdXNoID0gYigpLkgoKS5lbmQoKVxuICAgICwgU1NMUmVxdWVzdCA9IGIoKS5pMzIoOCkuaTMyKDgwODc3MTAzKS5lbmQoOClcbiAgICAsIEV4ZWN1dGVVbm5hbWVkID0gQnVmZmVyLmNvbmNhdChbYigpLkUoKS5zdHIoYi5OKS5pMzIoMCkuZW5kKCksIFN5bmNdKVxuICAgICwgRGVzY3JpYmVVbm5hbWVkID0gYigpLkQoKS5zdHIoJ1MnKS5zdHIoYi5OKS5lbmQoKVxuICAgICwgbm9vcCA9ICgpID0+IHsgLyogbm9vcCAqLyB9XG5cbmNvbnN0IHJldHJ5Um91dGluZXMgPSBuZXcgU2V0KFtcbiAgJ0ZldGNoUHJlcGFyZWRTdGF0ZW1lbnQnLFxuICAnUmV2YWxpZGF0ZUNhY2hlZFF1ZXJ5JyxcbiAgJ3RyYW5zZm9ybUFzc2lnbmVkRXhwcidcbl0pXG5cbmNvbnN0IGVycm9yRmllbGRzID0ge1xuICA4MyAgOiAnc2V2ZXJpdHlfbG9jYWwnLCAgICAvLyBTXG4gIDg2ICA6ICdzZXZlcml0eScsICAgICAgICAgIC8vIFZcbiAgNjcgIDogJ2NvZGUnLCAgICAgICAgICAgICAgLy8gQ1xuICA3NyAgOiAnbWVzc2FnZScsICAgICAgICAgICAvLyBNXG4gIDY4ICA6ICdkZXRhaWwnLCAgICAgICAgICAgIC8vIERcbiAgNzIgIDogJ2hpbnQnLCAgICAgICAgICAgICAgLy8gSFxuICA4MCAgOiAncG9zaXRpb24nLCAgICAgICAgICAvLyBQXG4gIDExMiA6ICdpbnRlcm5hbF9wb3NpdGlvbicsIC8vIHBcbiAgMTEzIDogJ2ludGVybmFsX3F1ZXJ5JywgICAgLy8gcVxuICA4NyAgOiAnd2hlcmUnLCAgICAgICAgICAgICAvLyBXXG4gIDExNSA6ICdzY2hlbWFfbmFtZScsICAgICAgIC8vIHNcbiAgMTE2IDogJ3RhYmxlX25hbWUnLCAgICAgICAgLy8gdFxuICA5OSAgOiAnY29sdW1uX25hbWUnLCAgICAgICAvLyBjXG4gIDEwMCA6ICdkYXRhIHR5cGVfbmFtZScsICAgIC8vIGRcbiAgMTEwIDogJ2NvbnN0cmFpbnRfbmFtZScsICAgLy8gblxuICA3MCAgOiAnZmlsZScsICAgICAgICAgICAgICAvLyBGXG4gIDc2ICA6ICdsaW5lJywgICAgICAgICAgICAgIC8vIExcbiAgODIgIDogJ3JvdXRpbmUnICAgICAgICAgICAgLy8gUlxufVxuXG5mdW5jdGlvbiBDb25uZWN0aW9uKG9wdGlvbnMsIHF1ZXVlcyA9IHt9LCB7IG9ub3BlbiA9IG5vb3AsIG9uZW5kID0gbm9vcCwgb25jbG9zZSA9IG5vb3AgfSA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBzc2wsXG4gICAgbWF4LFxuICAgIHVzZXIsXG4gICAgaG9zdCxcbiAgICBwb3J0LFxuICAgIGRhdGFiYXNlLFxuICAgIHBhcnNlcnMsXG4gICAgdHJhbnNmb3JtLFxuICAgIG9ubm90aWNlLFxuICAgIG9ubm90aWZ5LFxuICAgIG9ucGFyYW1ldGVyLFxuICAgIG1heF9waXBlbGluZSxcbiAgICBrZWVwX2FsaXZlLFxuICAgIGJhY2tvZmYsXG4gICAgdGFyZ2V0X3Nlc3Npb25fYXR0cnNcbiAgfSA9IG9wdGlvbnNcblxuICBjb25zdCBzZW50ID0gUXVldWUoKVxuICAgICAgLCBpZCA9IHVpZCsrXG4gICAgICAsIGJhY2tlbmQgPSB7IHBpZDogbnVsbCwgc2VjcmV0OiBudWxsIH1cbiAgICAgICwgaWRsZVRpbWVyID0gdGltZXIoZW5kLCBvcHRpb25zLmlkbGVfdGltZW91dClcbiAgICAgICwgbGlmZVRpbWVyID0gdGltZXIoZW5kLCBvcHRpb25zLm1heF9saWZldGltZSlcbiAgICAgICwgY29ubmVjdFRpbWVyID0gdGltZXIoY29ubmVjdFRpbWVkT3V0LCBvcHRpb25zLmNvbm5lY3RfdGltZW91dClcblxuICBsZXQgc29ja2V0ID0gbnVsbFxuICAgICwgY2FuY2VsTWVzc2FnZVxuICAgICwgcmVzdWx0ID0gbmV3IFJlc3VsdCgpXG4gICAgLCBpbmNvbWluZyA9IEJ1ZmZlci5hbGxvYygwKVxuICAgICwgbmVlZHNUeXBlcyA9IG9wdGlvbnMuZmV0Y2hfdHlwZXNcbiAgICAsIGJhY2tlbmRQYXJhbWV0ZXJzID0ge31cbiAgICAsIHN0YXRlbWVudHMgPSB7fVxuICAgICwgc3RhdGVtZW50SWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKVxuICAgICwgc3RhdGVtZW50Q291bnQgPSAxXG4gICAgLCBjbG9zZWREYXRlID0gMFxuICAgICwgcmVtYWluaW5nID0gMFxuICAgICwgaG9zdEluZGV4ID0gMFxuICAgICwgcmV0cmllcyA9IDBcbiAgICAsIGxlbmd0aCA9IDBcbiAgICAsIGRlbGF5ID0gMFxuICAgICwgcm93cyA9IDBcbiAgICAsIHNlcnZlclNpZ25hdHVyZSA9IG51bGxcbiAgICAsIG5leHRXcml0ZVRpbWVyID0gbnVsbFxuICAgICwgdGVybWluYXRlZCA9IGZhbHNlXG4gICAgLCBpbmNvbWluZ3MgPSBudWxsXG4gICAgLCByZXN1bHRzID0gbnVsbFxuICAgICwgaW5pdGlhbCA9IG51bGxcbiAgICAsIGVuZGluZyA9IG51bGxcbiAgICAsIHN0cmVhbSA9IG51bGxcbiAgICAsIGNodW5rID0gbnVsbFxuICAgICwgZW5kZWQgPSBudWxsXG4gICAgLCBub25jZSA9IG51bGxcbiAgICAsIHF1ZXJ5ID0gbnVsbFxuICAgICwgZmluYWwgPSBudWxsXG5cbiAgY29uc3QgY29ubmVjdGlvbiA9IHtcbiAgICBxdWV1ZTogcXVldWVzLmNsb3NlZCxcbiAgICBpZGxlVGltZXIsXG4gICAgY29ubmVjdChxdWVyeSkge1xuICAgICAgaW5pdGlhbCA9IHF1ZXJ5IHx8IHRydWVcbiAgICAgIHJlY29ubmVjdCgpXG4gICAgfSxcbiAgICB0ZXJtaW5hdGUsXG4gICAgZXhlY3V0ZSxcbiAgICBjYW5jZWwsXG4gICAgZW5kLFxuICAgIGNvdW50OiAwLFxuICAgIGlkXG4gIH1cblxuICBxdWV1ZXMuY2xvc2VkICYmIHF1ZXVlcy5jbG9zZWQucHVzaChjb25uZWN0aW9uKVxuXG4gIHJldHVybiBjb25uZWN0aW9uXG5cbiAgYXN5bmMgZnVuY3Rpb24gY3JlYXRlU29ja2V0KCkge1xuICAgIGxldCB4XG4gICAgdHJ5IHtcbiAgICAgIHggPSBvcHRpb25zLnNvY2tldFxuICAgICAgICA/IChhd2FpdCBQcm9taXNlLnJlc29sdmUob3B0aW9ucy5zb2NrZXQob3B0aW9ucykpKVxuICAgICAgICA6IG5ldyBuZXQuU29ja2V0KClcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlcnJvcihlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHgub24oJ2Vycm9yJywgZXJyb3IpXG4gICAgeC5vbignY2xvc2UnLCBjbG9zZWQpXG4gICAgeC5vbignZHJhaW4nLCBkcmFpbilcbiAgICByZXR1cm4geFxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gY2FuY2VsKHsgcGlkLCBzZWNyZXQgfSwgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNhbmNlbE1lc3NhZ2UgPSBiKCkuaTMyKDE2KS5pMzIoODA4NzcxMDIpLmkzMihwaWQpLmkzMihzZWNyZXQpLmVuZCgxNilcbiAgICAgIGF3YWl0IGNvbm5lY3QoKVxuICAgICAgc29ja2V0Lm9uY2UoJ2Vycm9yJywgcmVqZWN0KVxuICAgICAgc29ja2V0Lm9uY2UoJ2Nsb3NlJywgcmVzb2x2ZSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmVqZWN0KGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGV4ZWN1dGUocSkge1xuICAgIGlmICh0ZXJtaW5hdGVkKVxuICAgICAgcmV0dXJuIHF1ZXJ5RXJyb3IocSwgRXJyb3JzLmNvbm5lY3Rpb24oJ0NPTk5FQ1RJT05fREVTVFJPWUVEJywgb3B0aW9ucykpXG5cbiAgICBpZiAocS5jYW5jZWxsZWQpXG4gICAgICByZXR1cm5cblxuICAgIHRyeSB7XG4gICAgICBxLnN0YXRlID0gYmFja2VuZFxuICAgICAgcXVlcnlcbiAgICAgICAgPyBzZW50LnB1c2gocSlcbiAgICAgICAgOiAocXVlcnkgPSBxLCBxdWVyeS5hY3RpdmUgPSB0cnVlKVxuXG4gICAgICBidWlsZChxKVxuICAgICAgcmV0dXJuIHdyaXRlKHRvQnVmZmVyKHEpKVxuICAgICAgICAmJiAhcS5kZXNjcmliZUZpcnN0XG4gICAgICAgICYmICFxLmN1cnNvckZuXG4gICAgICAgICYmIHNlbnQubGVuZ3RoIDwgbWF4X3BpcGVsaW5lXG4gICAgICAgICYmICghcS5vcHRpb25zLm9uZXhlY3V0ZSB8fCBxLm9wdGlvbnMub25leGVjdXRlKGNvbm5lY3Rpb24pKVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBzZW50Lmxlbmd0aCA9PT0gMCAmJiB3cml0ZShTeW5jKVxuICAgICAgZXJyb3JlZChlcnJvcilcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG9CdWZmZXIocSkge1xuICAgIGlmIChxLnBhcmFtZXRlcnMubGVuZ3RoID49IDY1NTM0KVxuICAgICAgdGhyb3cgRXJyb3JzLmdlbmVyaWMoJ01BWF9QQVJBTUVURVJTX0VYQ0VFREVEJywgJ01heCBudW1iZXIgb2YgcGFyYW1ldGVycyAoNjU1MzQpIGV4Y2VlZGVkJylcblxuICAgIHJldHVybiBxLm9wdGlvbnMuc2ltcGxlXG4gICAgICA/IGIoKS5RKCkuc3RyKHEuc3RhdGVtZW50LnN0cmluZyArIGIuTikuZW5kKClcbiAgICAgIDogcS5kZXNjcmliZUZpcnN0XG4gICAgICAgID8gQnVmZmVyLmNvbmNhdChbZGVzY3JpYmUocSksIEZsdXNoXSlcbiAgICAgICAgOiBxLnByZXBhcmVcbiAgICAgICAgICA/IHEucHJlcGFyZWRcbiAgICAgICAgICAgID8gcHJlcGFyZWQocSlcbiAgICAgICAgICAgIDogQnVmZmVyLmNvbmNhdChbZGVzY3JpYmUocSksIHByZXBhcmVkKHEpXSlcbiAgICAgICAgICA6IHVubmFtZWQocSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlc2NyaWJlKHEpIHtcbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbXG4gICAgICBQYXJzZShxLnN0YXRlbWVudC5zdHJpbmcsIHEucGFyYW1ldGVycywgcS5zdGF0ZW1lbnQudHlwZXMsIHEuc3RhdGVtZW50Lm5hbWUpLFxuICAgICAgRGVzY3JpYmUoJ1MnLCBxLnN0YXRlbWVudC5uYW1lKVxuICAgIF0pXG4gIH1cblxuICBmdW5jdGlvbiBwcmVwYXJlZChxKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5jb25jYXQoW1xuICAgICAgQmluZChxLnBhcmFtZXRlcnMsIHEuc3RhdGVtZW50LnR5cGVzLCBxLnN0YXRlbWVudC5uYW1lLCBxLmN1cnNvck5hbWUpLFxuICAgICAgcS5jdXJzb3JGblxuICAgICAgICA/IEV4ZWN1dGUoJycsIHEuY3Vyc29yUm93cylcbiAgICAgICAgOiBFeGVjdXRlVW5uYW1lZFxuICAgIF0pXG4gIH1cblxuICBmdW5jdGlvbiB1bm5hbWVkKHEpIHtcbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbXG4gICAgICBQYXJzZShxLnN0YXRlbWVudC5zdHJpbmcsIHEucGFyYW1ldGVycywgcS5zdGF0ZW1lbnQudHlwZXMpLFxuICAgICAgRGVzY3JpYmVVbm5hbWVkLFxuICAgICAgcHJlcGFyZWQocSlcbiAgICBdKVxuICB9XG5cbiAgZnVuY3Rpb24gYnVpbGQocSkge1xuICAgIGNvbnN0IHBhcmFtZXRlcnMgPSBbXVxuICAgICAgICAsIHR5cGVzID0gW11cblxuICAgIGNvbnN0IHN0cmluZyA9IHN0cmluZ2lmeShxLCBxLnN0cmluZ3NbMF0sIHEuYXJnc1swXSwgcGFyYW1ldGVycywgdHlwZXMsIG9wdGlvbnMpXG5cbiAgICAhcS50YWdnZWQgJiYgcS5hcmdzLmZvckVhY2goeCA9PiBoYW5kbGVWYWx1ZSh4LCBwYXJhbWV0ZXJzLCB0eXBlcywgb3B0aW9ucykpXG5cbiAgICBxLnByZXBhcmUgPSBvcHRpb25zLnByZXBhcmUgJiYgKCdwcmVwYXJlJyBpbiBxLm9wdGlvbnMgPyBxLm9wdGlvbnMucHJlcGFyZSA6IHRydWUpXG4gICAgcS5zdHJpbmcgPSBzdHJpbmdcbiAgICBxLnNpZ25hdHVyZSA9IHEucHJlcGFyZSAmJiB0eXBlcyArIHN0cmluZ1xuICAgIHEub25seURlc2NyaWJlICYmIChkZWxldGUgc3RhdGVtZW50c1txLnNpZ25hdHVyZV0pXG4gICAgcS5wYXJhbWV0ZXJzID0gcS5wYXJhbWV0ZXJzIHx8IHBhcmFtZXRlcnNcbiAgICBxLnByZXBhcmVkID0gcS5wcmVwYXJlICYmIHEuc2lnbmF0dXJlIGluIHN0YXRlbWVudHNcbiAgICBxLmRlc2NyaWJlRmlyc3QgPSBxLm9ubHlEZXNjcmliZSB8fCAocGFyYW1ldGVycy5sZW5ndGggJiYgIXEucHJlcGFyZWQpXG4gICAgcS5zdGF0ZW1lbnQgPSBxLnByZXBhcmVkXG4gICAgICA/IHN0YXRlbWVudHNbcS5zaWduYXR1cmVdXG4gICAgICA6IHsgc3RyaW5nLCB0eXBlcywgbmFtZTogcS5wcmVwYXJlID8gc3RhdGVtZW50SWQgKyBzdGF0ZW1lbnRDb3VudCsrIDogJycgfVxuXG4gICAgdHlwZW9mIG9wdGlvbnMuZGVidWcgPT09ICdmdW5jdGlvbicgJiYgb3B0aW9ucy5kZWJ1ZyhpZCwgc3RyaW5nLCBwYXJhbWV0ZXJzLCB0eXBlcylcbiAgfVxuXG4gIGZ1bmN0aW9uIHdyaXRlKHgsIGZuKSB7XG4gICAgY2h1bmsgPSBjaHVuayA/IEJ1ZmZlci5jb25jYXQoW2NodW5rLCB4XSkgOiBCdWZmZXIuZnJvbSh4KVxuICAgIGlmIChmbiB8fCBjaHVuay5sZW5ndGggPj0gMTAyNClcbiAgICAgIHJldHVybiBuZXh0V3JpdGUoZm4pXG4gICAgbmV4dFdyaXRlVGltZXIgPT09IG51bGwgJiYgKG5leHRXcml0ZVRpbWVyID0gc2V0SW1tZWRpYXRlKG5leHRXcml0ZSkpXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHRXcml0ZShmbikge1xuICAgIGNvbnN0IHggPSBzb2NrZXQud3JpdGUoY2h1bmssIGZuKVxuICAgIG5leHRXcml0ZVRpbWVyICE9PSBudWxsICYmIGNsZWFySW1tZWRpYXRlKG5leHRXcml0ZVRpbWVyKVxuICAgIGNodW5rID0gbmV4dFdyaXRlVGltZXIgPSBudWxsXG4gICAgcmV0dXJuIHhcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbm5lY3RUaW1lZE91dCgpIHtcbiAgICBlcnJvcmVkKEVycm9ycy5jb25uZWN0aW9uKCdDT05ORUNUX1RJTUVPVVQnLCBvcHRpb25zLCBzb2NrZXQpKVxuICAgIHNvY2tldC5kZXN0cm95KClcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHNlY3VyZSgpIHtcbiAgICB3cml0ZShTU0xSZXF1ZXN0KVxuICAgIGNvbnN0IGNhblNTTCA9IGF3YWl0IG5ldyBQcm9taXNlKHIgPT4gc29ja2V0Lm9uY2UoJ2RhdGEnLCB4ID0+IHIoeFswXSA9PT0gODMpKSkgLy8gU1xuXG4gICAgaWYgKCFjYW5TU0wgJiYgc3NsID09PSAncHJlZmVyJylcbiAgICAgIHJldHVybiBjb25uZWN0ZWQoKVxuXG4gICAgc29ja2V0LnJlbW92ZUFsbExpc3RlbmVycygpXG4gICAgc29ja2V0ID0gdGxzLmNvbm5lY3Qoe1xuICAgICAgc29ja2V0LFxuICAgICAgc2VydmVybmFtZTogbmV0LmlzSVAoc29ja2V0Lmhvc3QpID8gdW5kZWZpbmVkIDogc29ja2V0Lmhvc3QsXG4gICAgICAuLi4oc3NsID09PSAncmVxdWlyZScgfHwgc3NsID09PSAnYWxsb3cnIHx8IHNzbCA9PT0gJ3ByZWZlcidcbiAgICAgICAgPyB7IHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UgfVxuICAgICAgICA6IHNzbCA9PT0gJ3ZlcmlmeS1mdWxsJ1xuICAgICAgICAgID8ge31cbiAgICAgICAgICA6IHR5cGVvZiBzc2wgPT09ICdvYmplY3QnXG4gICAgICAgICAgICA/IHNzbFxuICAgICAgICAgICAgOiB7fVxuICAgICAgKVxuICAgIH0pXG4gICAgc29ja2V0Lm9uKCdzZWN1cmVDb25uZWN0JywgY29ubmVjdGVkKVxuICAgIHNvY2tldC5vbignZXJyb3InLCBlcnJvcilcbiAgICBzb2NrZXQub24oJ2Nsb3NlJywgY2xvc2VkKVxuICAgIHNvY2tldC5vbignZHJhaW4nLCBkcmFpbilcbiAgfVxuXG4gIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgZnVuY3Rpb24gZHJhaW4oKSB7XG4gICAgIXF1ZXJ5ICYmIG9ub3Blbihjb25uZWN0aW9uKVxuICB9XG5cbiAgZnVuY3Rpb24gZGF0YSh4KSB7XG4gICAgaWYgKGluY29taW5ncykge1xuICAgICAgaW5jb21pbmdzLnB1c2goeClcbiAgICAgIHJlbWFpbmluZyAtPSB4Lmxlbmd0aFxuICAgICAgaWYgKHJlbWFpbmluZyA+PSAwKVxuICAgICAgICByZXR1cm5cbiAgICB9XG5cbiAgICBpbmNvbWluZyA9IGluY29taW5nc1xuICAgICAgPyBCdWZmZXIuY29uY2F0KGluY29taW5ncywgbGVuZ3RoIC0gcmVtYWluaW5nKVxuICAgICAgOiBpbmNvbWluZy5sZW5ndGggPT09IDBcbiAgICAgICAgPyB4XG4gICAgICAgIDogQnVmZmVyLmNvbmNhdChbaW5jb21pbmcsIHhdLCBpbmNvbWluZy5sZW5ndGggKyB4Lmxlbmd0aClcblxuICAgIHdoaWxlIChpbmNvbWluZy5sZW5ndGggPiA0KSB7XG4gICAgICBsZW5ndGggPSBpbmNvbWluZy5yZWFkVUludDMyQkUoMSlcbiAgICAgIGlmIChsZW5ndGggPj0gaW5jb21pbmcubGVuZ3RoKSB7XG4gICAgICAgIHJlbWFpbmluZyA9IGxlbmd0aCAtIGluY29taW5nLmxlbmd0aFxuICAgICAgICBpbmNvbWluZ3MgPSBbaW5jb21pbmddXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGhhbmRsZShpbmNvbWluZy5zdWJhcnJheSgwLCBsZW5ndGggKyAxKSlcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcXVlcnkgJiYgKHF1ZXJ5LmN1cnNvckZuIHx8IHF1ZXJ5LmRlc2NyaWJlRmlyc3QpICYmIHdyaXRlKFN5bmMpXG4gICAgICAgIGVycm9yZWQoZSlcbiAgICAgIH1cbiAgICAgIGluY29taW5nID0gaW5jb21pbmcuc3ViYXJyYXkobGVuZ3RoICsgMSlcbiAgICAgIHJlbWFpbmluZyA9IDBcbiAgICAgIGluY29taW5ncyA9IG51bGxcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBjb25uZWN0KCkge1xuICAgIHRlcm1pbmF0ZWQgPSBmYWxzZVxuICAgIGJhY2tlbmRQYXJhbWV0ZXJzID0ge31cbiAgICBzb2NrZXQgfHwgKHNvY2tldCA9IGF3YWl0IGNyZWF0ZVNvY2tldCgpKVxuXG4gICAgaWYgKCFzb2NrZXQpXG4gICAgICByZXR1cm5cblxuICAgIGNvbm5lY3RUaW1lci5zdGFydCgpXG5cbiAgICBpZiAob3B0aW9ucy5zb2NrZXQpXG4gICAgICByZXR1cm4gc3NsID8gc2VjdXJlKCkgOiBjb25uZWN0ZWQoKVxuXG4gICAgc29ja2V0Lm9uKCdjb25uZWN0Jywgc3NsID8gc2VjdXJlIDogY29ubmVjdGVkKVxuXG4gICAgaWYgKG9wdGlvbnMucGF0aClcbiAgICAgIHJldHVybiBzb2NrZXQuY29ubmVjdChvcHRpb25zLnBhdGgpXG5cbiAgICBzb2NrZXQuc3NsID0gc3NsXG4gICAgc29ja2V0LmNvbm5lY3QocG9ydFtob3N0SW5kZXhdLCBob3N0W2hvc3RJbmRleF0pXG4gICAgc29ja2V0Lmhvc3QgPSBob3N0W2hvc3RJbmRleF1cbiAgICBzb2NrZXQucG9ydCA9IHBvcnRbaG9zdEluZGV4XVxuXG4gICAgaG9zdEluZGV4ID0gKGhvc3RJbmRleCArIDEpICUgcG9ydC5sZW5ndGhcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29ubmVjdCgpIHtcbiAgICBzZXRUaW1lb3V0KGNvbm5lY3QsIGNsb3NlZERhdGUgPyBjbG9zZWREYXRlICsgZGVsYXkgLSBwZXJmb3JtYW5jZS5ub3coKSA6IDApXG4gIH1cblxuICBmdW5jdGlvbiBjb25uZWN0ZWQoKSB7XG4gICAgdHJ5IHtcbiAgICAgIHN0YXRlbWVudHMgPSB7fVxuICAgICAgbmVlZHNUeXBlcyA9IG9wdGlvbnMuZmV0Y2hfdHlwZXNcbiAgICAgIHN0YXRlbWVudElkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMilcbiAgICAgIHN0YXRlbWVudENvdW50ID0gMVxuICAgICAgbGlmZVRpbWVyLnN0YXJ0KClcbiAgICAgIHNvY2tldC5vbignZGF0YScsIGRhdGEpXG4gICAgICBrZWVwX2FsaXZlICYmIHNvY2tldC5zZXRLZWVwQWxpdmUgJiYgc29ja2V0LnNldEtlZXBBbGl2ZSh0cnVlLCAxMDAwICoga2VlcF9hbGl2ZSlcbiAgICAgIGNvbnN0IHMgPSBTdGFydHVwTWVzc2FnZSgpXG4gICAgICB3cml0ZShzKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZXJyb3IoZXJyKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVycm9yKGVycikge1xuICAgIGlmIChjb25uZWN0aW9uLnF1ZXVlID09PSBxdWV1ZXMuY29ubmVjdGluZyAmJiBvcHRpb25zLmhvc3RbcmV0cmllcyArIDFdKVxuICAgICAgcmV0dXJuXG5cbiAgICBlcnJvcmVkKGVycilcbiAgICB3aGlsZSAoc2VudC5sZW5ndGgpXG4gICAgICBxdWVyeUVycm9yKHNlbnQuc2hpZnQoKSwgZXJyKVxuICB9XG5cbiAgZnVuY3Rpb24gZXJyb3JlZChlcnIpIHtcbiAgICBzdHJlYW0gJiYgKHN0cmVhbS5kZXN0cm95KGVyciksIHN0cmVhbSA9IG51bGwpXG4gICAgcXVlcnkgJiYgcXVlcnlFcnJvcihxdWVyeSwgZXJyKVxuICAgIGluaXRpYWwgJiYgKHF1ZXJ5RXJyb3IoaW5pdGlhbCwgZXJyKSwgaW5pdGlhbCA9IG51bGwpXG4gIH1cblxuICBmdW5jdGlvbiBxdWVyeUVycm9yKHF1ZXJ5LCBlcnIpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhlcnIsIHtcbiAgICAgIHN0YWNrOiB7IHZhbHVlOiBlcnIuc3RhY2sgKyBxdWVyeS5vcmlnaW4ucmVwbGFjZSgvLipcXG4vLCAnXFxuJyksIGVudW1lcmFibGU6IG9wdGlvbnMuZGVidWcgfSxcbiAgICAgIHF1ZXJ5OiB7IHZhbHVlOiBxdWVyeS5zdHJpbmcsIGVudW1lcmFibGU6IG9wdGlvbnMuZGVidWcgfSxcbiAgICAgIHBhcmFtZXRlcnM6IHsgdmFsdWU6IHF1ZXJ5LnBhcmFtZXRlcnMsIGVudW1lcmFibGU6IG9wdGlvbnMuZGVidWcgfSxcbiAgICAgIGFyZ3M6IHsgdmFsdWU6IHF1ZXJ5LmFyZ3MsIGVudW1lcmFibGU6IG9wdGlvbnMuZGVidWcgfSxcbiAgICAgIHR5cGVzOiB7IHZhbHVlOiBxdWVyeS5zdGF0ZW1lbnQgJiYgcXVlcnkuc3RhdGVtZW50LnR5cGVzLCBlbnVtZXJhYmxlOiBvcHRpb25zLmRlYnVnIH1cbiAgICB9KVxuICAgIHF1ZXJ5LnJlamVjdChlcnIpXG4gIH1cblxuICBmdW5jdGlvbiBlbmQoKSB7XG4gICAgcmV0dXJuIGVuZGluZyB8fCAoXG4gICAgICAhY29ubmVjdGlvbi5yZXNlcnZlZCAmJiBvbmVuZChjb25uZWN0aW9uKSxcbiAgICAgICFjb25uZWN0aW9uLnJlc2VydmVkICYmICFpbml0aWFsICYmICFxdWVyeSAmJiBzZW50Lmxlbmd0aCA9PT0gMFxuICAgICAgICA/ICh0ZXJtaW5hdGUoKSwgbmV3IFByb21pc2UociA9PiBzb2NrZXQgJiYgc29ja2V0LnJlYWR5U3RhdGUgIT09ICdjbG9zZWQnID8gc29ja2V0Lm9uY2UoJ2Nsb3NlJywgcikgOiByKCkpKVxuICAgICAgICA6IGVuZGluZyA9IG5ldyBQcm9taXNlKHIgPT4gZW5kZWQgPSByKVxuICAgIClcbiAgfVxuXG4gIGZ1bmN0aW9uIHRlcm1pbmF0ZSgpIHtcbiAgICB0ZXJtaW5hdGVkID0gdHJ1ZVxuICAgIGlmIChzdHJlYW0gfHwgcXVlcnkgfHwgaW5pdGlhbCB8fCBzZW50Lmxlbmd0aClcbiAgICAgIGVycm9yKEVycm9ycy5jb25uZWN0aW9uKCdDT05ORUNUSU9OX0RFU1RST1lFRCcsIG9wdGlvbnMpKVxuXG4gICAgY2xlYXJJbW1lZGlhdGUobmV4dFdyaXRlVGltZXIpXG4gICAgaWYgKHNvY2tldCkge1xuICAgICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgZGF0YSlcbiAgICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignY29ubmVjdCcsIGNvbm5lY3RlZClcbiAgICAgIHNvY2tldC5yZWFkeVN0YXRlID09PSAnb3BlbicgJiYgc29ja2V0LmVuZChiKCkuWCgpLmVuZCgpKVxuICAgIH1cbiAgICBlbmRlZCAmJiAoZW5kZWQoKSwgZW5kaW5nID0gZW5kZWQgPSBudWxsKVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gY2xvc2VkKGhhZEVycm9yKSB7XG4gICAgaW5jb21pbmcgPSBCdWZmZXIuYWxsb2MoMClcbiAgICByZW1haW5pbmcgPSAwXG4gICAgaW5jb21pbmdzID0gbnVsbFxuICAgIGNsZWFySW1tZWRpYXRlKG5leHRXcml0ZVRpbWVyKVxuICAgIHNvY2tldC5yZW1vdmVMaXN0ZW5lcignZGF0YScsIGRhdGEpXG4gICAgc29ja2V0LnJlbW92ZUxpc3RlbmVyKCdjb25uZWN0JywgY29ubmVjdGVkKVxuICAgIGlkbGVUaW1lci5jYW5jZWwoKVxuICAgIGxpZmVUaW1lci5jYW5jZWwoKVxuICAgIGNvbm5lY3RUaW1lci5jYW5jZWwoKVxuXG4gICAgaWYgKHNvY2tldC5lbmNyeXB0ZWQpIHtcbiAgICAgIHNvY2tldC5yZW1vdmVBbGxMaXN0ZW5lcnMoKVxuICAgICAgc29ja2V0ID0gbnVsbFxuICAgIH1cblxuICAgIGlmIChpbml0aWFsKVxuICAgICAgcmV0dXJuIHJlY29ubmVjdCgpXG5cbiAgICAhaGFkRXJyb3IgJiYgKHF1ZXJ5IHx8IHNlbnQubGVuZ3RoKSAmJiBlcnJvcihFcnJvcnMuY29ubmVjdGlvbignQ09OTkVDVElPTl9DTE9TRUQnLCBvcHRpb25zLCBzb2NrZXQpKVxuICAgIGNsb3NlZERhdGUgPSBwZXJmb3JtYW5jZS5ub3coKVxuICAgIGhhZEVycm9yICYmIG9wdGlvbnMuc2hhcmVkLnJldHJpZXMrK1xuICAgIGRlbGF5ID0gKHR5cGVvZiBiYWNrb2ZmID09PSAnZnVuY3Rpb24nID8gYmFja29mZihvcHRpb25zLnNoYXJlZC5yZXRyaWVzKSA6IGJhY2tvZmYpICogMTAwMFxuICAgIG9uY2xvc2UoY29ubmVjdGlvbiwgRXJyb3JzLmNvbm5lY3Rpb24oJ0NPTk5FQ1RJT05fQ0xPU0VEJywgb3B0aW9ucywgc29ja2V0KSlcbiAgfVxuXG4gIC8qIEhhbmRsZXJzICovXG4gIGZ1bmN0aW9uIGhhbmRsZSh4cywgeCA9IHhzWzBdKSB7XG4gICAgKFxuICAgICAgeCA9PT0gNjggPyBEYXRhUm93IDogICAgICAgICAgICAgICAgICAgLy8gRFxuICAgICAgeCA9PT0gMTAwID8gQ29weURhdGEgOiAgICAgICAgICAgICAgICAgLy8gZFxuICAgICAgeCA9PT0gNjUgPyBOb3RpZmljYXRpb25SZXNwb25zZSA6ICAgICAgLy8gQVxuICAgICAgeCA9PT0gODMgPyBQYXJhbWV0ZXJTdGF0dXMgOiAgICAgICAgICAgLy8gU1xuICAgICAgeCA9PT0gOTAgPyBSZWFkeUZvclF1ZXJ5IDogICAgICAgICAgICAgLy8gWlxuICAgICAgeCA9PT0gNjcgPyBDb21tYW5kQ29tcGxldGUgOiAgICAgICAgICAgLy8gQ1xuICAgICAgeCA9PT0gNTAgPyBCaW5kQ29tcGxldGUgOiAgICAgICAgICAgICAgLy8gMlxuICAgICAgeCA9PT0gNDkgPyBQYXJzZUNvbXBsZXRlIDogICAgICAgICAgICAgLy8gMVxuICAgICAgeCA9PT0gMTE2ID8gUGFyYW1ldGVyRGVzY3JpcHRpb24gOiAgICAgLy8gdFxuICAgICAgeCA9PT0gODQgPyBSb3dEZXNjcmlwdGlvbiA6ICAgICAgICAgICAgLy8gVFxuICAgICAgeCA9PT0gODIgPyBBdXRoZW50aWNhdGlvbiA6ICAgICAgICAgICAgLy8gUlxuICAgICAgeCA9PT0gMTEwID8gTm9EYXRhIDogICAgICAgICAgICAgICAgICAgLy8gblxuICAgICAgeCA9PT0gNzUgPyBCYWNrZW5kS2V5RGF0YSA6ICAgICAgICAgICAgLy8gS1xuICAgICAgeCA9PT0gNjkgPyBFcnJvclJlc3BvbnNlIDogICAgICAgICAgICAgLy8gRVxuICAgICAgeCA9PT0gMTE1ID8gUG9ydGFsU3VzcGVuZGVkIDogICAgICAgICAgLy8gc1xuICAgICAgeCA9PT0gNTEgPyBDbG9zZUNvbXBsZXRlIDogICAgICAgICAgICAgLy8gM1xuICAgICAgeCA9PT0gNzEgPyBDb3B5SW5SZXNwb25zZSA6ICAgICAgICAgICAgLy8gR1xuICAgICAgeCA9PT0gNzggPyBOb3RpY2VSZXNwb25zZSA6ICAgICAgICAgICAgLy8gTlxuICAgICAgeCA9PT0gNzIgPyBDb3B5T3V0UmVzcG9uc2UgOiAgICAgICAgICAgLy8gSFxuICAgICAgeCA9PT0gOTkgPyBDb3B5RG9uZSA6ICAgICAgICAgICAgICAgICAgLy8gY1xuICAgICAgeCA9PT0gNzMgPyBFbXB0eVF1ZXJ5UmVzcG9uc2UgOiAgICAgICAgLy8gSVxuICAgICAgeCA9PT0gODYgPyBGdW5jdGlvbkNhbGxSZXNwb25zZSA6ICAgICAgLy8gVlxuICAgICAgeCA9PT0gMTE4ID8gTmVnb3RpYXRlUHJvdG9jb2xWZXJzaW9uIDogLy8gdlxuICAgICAgeCA9PT0gODcgPyBDb3B5Qm90aFJlc3BvbnNlIDogICAgICAgICAgLy8gV1xuICAgICAgLyogYzggaWdub3JlIG5leHQgKi9cbiAgICAgIFVua25vd25NZXNzYWdlXG4gICAgKSh4cylcbiAgfVxuXG4gIGZ1bmN0aW9uIERhdGFSb3coeCkge1xuICAgIGxldCBpbmRleCA9IDdcbiAgICBsZXQgbGVuZ3RoXG4gICAgbGV0IGNvbHVtblxuICAgIGxldCB2YWx1ZVxuXG4gICAgY29uc3Qgcm93ID0gcXVlcnkuaXNSYXcgPyBuZXcgQXJyYXkocXVlcnkuc3RhdGVtZW50LmNvbHVtbnMubGVuZ3RoKSA6IHt9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBxdWVyeS5zdGF0ZW1lbnQuY29sdW1ucy5sZW5ndGg7IGkrKykge1xuICAgICAgY29sdW1uID0gcXVlcnkuc3RhdGVtZW50LmNvbHVtbnNbaV1cbiAgICAgIGxlbmd0aCA9IHgucmVhZEludDMyQkUoaW5kZXgpXG4gICAgICBpbmRleCArPSA0XG5cbiAgICAgIHZhbHVlID0gbGVuZ3RoID09PSAtMVxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBxdWVyeS5pc1JhdyA9PT0gdHJ1ZVxuICAgICAgICAgID8geC5zdWJhcnJheShpbmRleCwgaW5kZXggKz0gbGVuZ3RoKVxuICAgICAgICAgIDogY29sdW1uLnBhcnNlciA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IHgudG9TdHJpbmcoJ3V0ZjgnLCBpbmRleCwgaW5kZXggKz0gbGVuZ3RoKVxuICAgICAgICAgICAgOiBjb2x1bW4ucGFyc2VyLmFycmF5ID09PSB0cnVlXG4gICAgICAgICAgICAgID8gY29sdW1uLnBhcnNlcih4LnRvU3RyaW5nKCd1dGY4JywgaW5kZXggKyAxLCBpbmRleCArPSBsZW5ndGgpKVxuICAgICAgICAgICAgICA6IGNvbHVtbi5wYXJzZXIoeC50b1N0cmluZygndXRmOCcsIGluZGV4LCBpbmRleCArPSBsZW5ndGgpKVxuXG4gICAgICBxdWVyeS5pc1Jhd1xuICAgICAgICA/IChyb3dbaV0gPSBxdWVyeS5pc1JhdyA9PT0gdHJ1ZVxuICAgICAgICAgID8gdmFsdWVcbiAgICAgICAgICA6IHRyYW5zZm9ybS52YWx1ZS5mcm9tID8gdHJhbnNmb3JtLnZhbHVlLmZyb20odmFsdWUsIGNvbHVtbikgOiB2YWx1ZSlcbiAgICAgICAgOiAocm93W2NvbHVtbi5uYW1lXSA9IHRyYW5zZm9ybS52YWx1ZS5mcm9tID8gdHJhbnNmb3JtLnZhbHVlLmZyb20odmFsdWUsIGNvbHVtbikgOiB2YWx1ZSlcbiAgICB9XG5cbiAgICBxdWVyeS5mb3JFYWNoRm5cbiAgICAgID8gcXVlcnkuZm9yRWFjaEZuKHRyYW5zZm9ybS5yb3cuZnJvbSA/IHRyYW5zZm9ybS5yb3cuZnJvbShyb3cpIDogcm93LCByZXN1bHQpXG4gICAgICA6IChyZXN1bHRbcm93cysrXSA9IHRyYW5zZm9ybS5yb3cuZnJvbSA/IHRyYW5zZm9ybS5yb3cuZnJvbShyb3cpIDogcm93KVxuICB9XG5cbiAgZnVuY3Rpb24gUGFyYW1ldGVyU3RhdHVzKHgpIHtcbiAgICBjb25zdCBbaywgdl0gPSB4LnRvU3RyaW5nKCd1dGY4JywgNSwgeC5sZW5ndGggLSAxKS5zcGxpdChiLk4pXG4gICAgYmFja2VuZFBhcmFtZXRlcnNba10gPSB2XG4gICAgaWYgKG9wdGlvbnMucGFyYW1ldGVyc1trXSAhPT0gdikge1xuICAgICAgb3B0aW9ucy5wYXJhbWV0ZXJzW2tdID0gdlxuICAgICAgb25wYXJhbWV0ZXIgJiYgb25wYXJhbWV0ZXIoaywgdilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBSZWFkeUZvclF1ZXJ5KHgpIHtcbiAgICBxdWVyeSAmJiBxdWVyeS5vcHRpb25zLnNpbXBsZSAmJiBxdWVyeS5yZXNvbHZlKHJlc3VsdHMgfHwgcmVzdWx0KVxuICAgIHF1ZXJ5ID0gcmVzdWx0cyA9IG51bGxcbiAgICByZXN1bHQgPSBuZXcgUmVzdWx0KClcbiAgICBjb25uZWN0VGltZXIuY2FuY2VsKClcblxuICAgIGlmIChpbml0aWFsKSB7XG4gICAgICBpZiAodGFyZ2V0X3Nlc3Npb25fYXR0cnMpIHtcbiAgICAgICAgaWYgKCFiYWNrZW5kUGFyYW1ldGVycy5pbl9ob3Rfc3RhbmRieSB8fCAhYmFja2VuZFBhcmFtZXRlcnMuZGVmYXVsdF90cmFuc2FjdGlvbl9yZWFkX29ubHkpXG4gICAgICAgICAgcmV0dXJuIGZldGNoU3RhdGUoKVxuICAgICAgICBlbHNlIGlmICh0cnlOZXh0KHRhcmdldF9zZXNzaW9uX2F0dHJzLCBiYWNrZW5kUGFyYW1ldGVycykpXG4gICAgICAgICAgcmV0dXJuIHRlcm1pbmF0ZSgpXG4gICAgICB9XG5cbiAgICAgIGlmIChuZWVkc1R5cGVzKSB7XG4gICAgICAgIGluaXRpYWwgPT09IHRydWUgJiYgKGluaXRpYWwgPSBudWxsKVxuICAgICAgICByZXR1cm4gZmV0Y2hBcnJheVR5cGVzKClcbiAgICAgIH1cblxuICAgICAgaW5pdGlhbCAhPT0gdHJ1ZSAmJiBleGVjdXRlKGluaXRpYWwpXG4gICAgICBvcHRpb25zLnNoYXJlZC5yZXRyaWVzID0gcmV0cmllcyA9IDBcbiAgICAgIGluaXRpYWwgPSBudWxsXG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB3aGlsZSAoc2VudC5sZW5ndGggJiYgKHF1ZXJ5ID0gc2VudC5zaGlmdCgpKSAmJiAocXVlcnkuYWN0aXZlID0gdHJ1ZSwgcXVlcnkuY2FuY2VsbGVkKSlcbiAgICAgIENvbm5lY3Rpb24ob3B0aW9ucykuY2FuY2VsKHF1ZXJ5LnN0YXRlLCBxdWVyeS5jYW5jZWxsZWQucmVzb2x2ZSwgcXVlcnkuY2FuY2VsbGVkLnJlamVjdClcblxuICAgIGlmIChxdWVyeSlcbiAgICAgIHJldHVybiAvLyBDb25zaWRlciBvcGVuaW5nIGlmIGFibGUgYW5kIHNlbnQubGVuZ3RoIDwgNTBcblxuICAgIGNvbm5lY3Rpb24ucmVzZXJ2ZWRcbiAgICAgID8gIWNvbm5lY3Rpb24ucmVzZXJ2ZWQucmVsZWFzZSAmJiB4WzVdID09PSA3MyAvLyBJXG4gICAgICAgID8gZW5kaW5nXG4gICAgICAgICAgPyB0ZXJtaW5hdGUoKVxuICAgICAgICAgIDogKGNvbm5lY3Rpb24ucmVzZXJ2ZWQgPSBudWxsLCBvbm9wZW4oY29ubmVjdGlvbikpXG4gICAgICAgIDogY29ubmVjdGlvbi5yZXNlcnZlZCgpXG4gICAgICA6IGVuZGluZ1xuICAgICAgICA/IHRlcm1pbmF0ZSgpXG4gICAgICAgIDogb25vcGVuKGNvbm5lY3Rpb24pXG4gIH1cblxuICBmdW5jdGlvbiBDb21tYW5kQ29tcGxldGUoeCkge1xuICAgIHJvd3MgPSAwXG5cbiAgICBmb3IgKGxldCBpID0geC5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgICBpZiAoeFtpXSA9PT0gMzIgJiYgeFtpICsgMV0gPCA1OCAmJiByZXN1bHQuY291bnQgPT09IG51bGwpXG4gICAgICAgIHJlc3VsdC5jb3VudCA9ICt4LnRvU3RyaW5nKCd1dGY4JywgaSArIDEsIHgubGVuZ3RoIC0gMSlcbiAgICAgIGlmICh4W2kgLSAxXSA+PSA2NSkge1xuICAgICAgICByZXN1bHQuY29tbWFuZCA9IHgudG9TdHJpbmcoJ3V0ZjgnLCA1LCBpKVxuICAgICAgICByZXN1bHQuc3RhdGUgPSBiYWNrZW5kXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgZmluYWwgJiYgKGZpbmFsKCksIGZpbmFsID0gbnVsbClcblxuICAgIGlmIChyZXN1bHQuY29tbWFuZCA9PT0gJ0JFR0lOJyAmJiBtYXggIT09IDEgJiYgIWNvbm5lY3Rpb24ucmVzZXJ2ZWQpXG4gICAgICByZXR1cm4gZXJyb3JlZChFcnJvcnMuZ2VuZXJpYygnVU5TQUZFX1RSQU5TQUNUSU9OJywgJ09ubHkgdXNlIHNxbC5iZWdpbiwgc3FsLnJlc2VydmVkIG9yIG1heDogMScpKVxuXG4gICAgaWYgKHF1ZXJ5Lm9wdGlvbnMuc2ltcGxlKVxuICAgICAgcmV0dXJuIEJpbmRDb21wbGV0ZSgpXG5cbiAgICBpZiAocXVlcnkuY3Vyc29yRm4pIHtcbiAgICAgIHJlc3VsdC5jb3VudCAmJiBxdWVyeS5jdXJzb3JGbihyZXN1bHQpXG4gICAgICB3cml0ZShTeW5jKVxuICAgIH1cblxuICAgIHF1ZXJ5LnJlc29sdmUocmVzdWx0KVxuICB9XG5cbiAgZnVuY3Rpb24gUGFyc2VDb21wbGV0ZSgpIHtcbiAgICBxdWVyeS5wYXJzaW5nID0gZmFsc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIEJpbmRDb21wbGV0ZSgpIHtcbiAgICAhcmVzdWx0LnN0YXRlbWVudCAmJiAocmVzdWx0LnN0YXRlbWVudCA9IHF1ZXJ5LnN0YXRlbWVudClcbiAgICByZXN1bHQuY29sdW1ucyA9IHF1ZXJ5LnN0YXRlbWVudC5jb2x1bW5zXG4gIH1cblxuICBmdW5jdGlvbiBQYXJhbWV0ZXJEZXNjcmlwdGlvbih4KSB7XG4gICAgY29uc3QgbGVuZ3RoID0geC5yZWFkVUludDE2QkUoNSlcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpXG4gICAgICAhcXVlcnkuc3RhdGVtZW50LnR5cGVzW2ldICYmIChxdWVyeS5zdGF0ZW1lbnQudHlwZXNbaV0gPSB4LnJlYWRVSW50MzJCRSg3ICsgaSAqIDQpKVxuXG4gICAgcXVlcnkucHJlcGFyZSAmJiAoc3RhdGVtZW50c1txdWVyeS5zaWduYXR1cmVdID0gcXVlcnkuc3RhdGVtZW50KVxuICAgIHF1ZXJ5LmRlc2NyaWJlRmlyc3QgJiYgIXF1ZXJ5Lm9ubHlEZXNjcmliZSAmJiAod3JpdGUocHJlcGFyZWQocXVlcnkpKSwgcXVlcnkuZGVzY3JpYmVGaXJzdCA9IGZhbHNlKVxuICB9XG5cbiAgZnVuY3Rpb24gUm93RGVzY3JpcHRpb24oeCkge1xuICAgIGlmIChyZXN1bHQuY29tbWFuZCkge1xuICAgICAgcmVzdWx0cyA9IHJlc3VsdHMgfHwgW3Jlc3VsdF1cbiAgICAgIHJlc3VsdHMucHVzaChyZXN1bHQgPSBuZXcgUmVzdWx0KCkpXG4gICAgICByZXN1bHQuY291bnQgPSBudWxsXG4gICAgICBxdWVyeS5zdGF0ZW1lbnQuY29sdW1ucyA9IG51bGxcbiAgICB9XG5cbiAgICBjb25zdCBsZW5ndGggPSB4LnJlYWRVSW50MTZCRSg1KVxuICAgIGxldCBpbmRleCA9IDdcbiAgICBsZXQgc3RhcnRcblxuICAgIHF1ZXJ5LnN0YXRlbWVudC5jb2x1bW5zID0gQXJyYXkobGVuZ3RoKVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgc3RhcnQgPSBpbmRleFxuICAgICAgd2hpbGUgKHhbaW5kZXgrK10gIT09IDApO1xuICAgICAgY29uc3QgdGFibGUgPSB4LnJlYWRVSW50MzJCRShpbmRleClcbiAgICAgIGNvbnN0IG51bWJlciA9IHgucmVhZFVJbnQxNkJFKGluZGV4ICsgNClcbiAgICAgIGNvbnN0IHR5cGUgPSB4LnJlYWRVSW50MzJCRShpbmRleCArIDYpXG4gICAgICBxdWVyeS5zdGF0ZW1lbnQuY29sdW1uc1tpXSA9IHtcbiAgICAgICAgbmFtZTogdHJhbnNmb3JtLmNvbHVtbi5mcm9tXG4gICAgICAgICAgPyB0cmFuc2Zvcm0uY29sdW1uLmZyb20oeC50b1N0cmluZygndXRmOCcsIHN0YXJ0LCBpbmRleCAtIDEpKVxuICAgICAgICAgIDogeC50b1N0cmluZygndXRmOCcsIHN0YXJ0LCBpbmRleCAtIDEpLFxuICAgICAgICBwYXJzZXI6IHBhcnNlcnNbdHlwZV0sXG4gICAgICAgIHRhYmxlLFxuICAgICAgICBudW1iZXIsXG4gICAgICAgIHR5cGVcbiAgICAgIH1cbiAgICAgIGluZGV4ICs9IDE4XG4gICAgfVxuXG4gICAgcmVzdWx0LnN0YXRlbWVudCA9IHF1ZXJ5LnN0YXRlbWVudFxuICAgIGlmIChxdWVyeS5vbmx5RGVzY3JpYmUpXG4gICAgICByZXR1cm4gKHF1ZXJ5LnJlc29sdmUocXVlcnkuc3RhdGVtZW50KSwgd3JpdGUoU3luYykpXG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBBdXRoZW50aWNhdGlvbih4LCB0eXBlID0geC5yZWFkVUludDMyQkUoNSkpIHtcbiAgICAoXG4gICAgICB0eXBlID09PSAzID8gQXV0aGVudGljYXRpb25DbGVhcnRleHRQYXNzd29yZCA6XG4gICAgICB0eXBlID09PSA1ID8gQXV0aGVudGljYXRpb25NRDVQYXNzd29yZCA6XG4gICAgICB0eXBlID09PSAxMCA/IFNBU0wgOlxuICAgICAgdHlwZSA9PT0gMTEgPyBTQVNMQ29udGludWUgOlxuICAgICAgdHlwZSA9PT0gMTIgPyBTQVNMRmluYWwgOlxuICAgICAgdHlwZSAhPT0gMCA/IFVua25vd25BdXRoIDpcbiAgICAgIG5vb3BcbiAgICApKHgsIHR5cGUpXG4gIH1cblxuICAvKiBjOCBpZ25vcmUgbmV4dCA1ICovXG4gIGFzeW5jIGZ1bmN0aW9uIEF1dGhlbnRpY2F0aW9uQ2xlYXJ0ZXh0UGFzc3dvcmQoKSB7XG4gICAgY29uc3QgcGF5bG9hZCA9IGF3YWl0IFBhc3MoKVxuICAgIHdyaXRlKFxuICAgICAgYigpLnAoKS5zdHIocGF5bG9hZCkueigxKS5lbmQoKVxuICAgIClcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIEF1dGhlbnRpY2F0aW9uTUQ1UGFzc3dvcmQoeCkge1xuICAgIGNvbnN0IHBheWxvYWQgPSAnbWQ1JyArIChcbiAgICAgIGF3YWl0IG1kNShcbiAgICAgICAgQnVmZmVyLmNvbmNhdChbXG4gICAgICAgICAgQnVmZmVyLmZyb20oYXdhaXQgbWQ1KChhd2FpdCBQYXNzKCkpICsgdXNlcikpLFxuICAgICAgICAgIHguc3ViYXJyYXkoOSlcbiAgICAgICAgXSlcbiAgICAgIClcbiAgICApXG4gICAgd3JpdGUoXG4gICAgICBiKCkucCgpLnN0cihwYXlsb2FkKS56KDEpLmVuZCgpXG4gICAgKVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gU0FTTCgpIHtcbiAgICBub25jZSA9IChhd2FpdCBjcnlwdG8ucmFuZG9tQnl0ZXMoMTgpKS50b1N0cmluZygnYmFzZTY0JylcbiAgICBiKCkucCgpLnN0cignU0NSQU0tU0hBLTI1NicgKyBiLk4pXG4gICAgY29uc3QgaSA9IGIuaVxuICAgIHdyaXRlKGIuaW5jKDQpLnN0cignbiwsbj0qLHI9JyArIG5vbmNlKS5pMzIoYi5pIC0gaSAtIDQsIGkpLmVuZCgpKVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gU0FTTENvbnRpbnVlKHgpIHtcbiAgICBjb25zdCByZXMgPSB4LnRvU3RyaW5nKCd1dGY4JywgOSkuc3BsaXQoJywnKS5yZWR1Y2UoKGFjYywgeCkgPT4gKGFjY1t4WzBdXSA9IHguc2xpY2UoMiksIGFjYyksIHt9KVxuXG4gICAgY29uc3Qgc2FsdGVkUGFzc3dvcmQgPSBhd2FpdCBjcnlwdG8ucGJrZGYyU3luYyhcbiAgICAgIGF3YWl0IFBhc3MoKSxcbiAgICAgIEJ1ZmZlci5mcm9tKHJlcy5zLCAnYmFzZTY0JyksXG4gICAgICBwYXJzZUludChyZXMuaSksIDMyLFxuICAgICAgJ3NoYTI1NidcbiAgICApXG5cbiAgICBjb25zdCBjbGllbnRLZXkgPSBhd2FpdCBobWFjKHNhbHRlZFBhc3N3b3JkLCAnQ2xpZW50IEtleScpXG5cbiAgICBjb25zdCBhdXRoID0gJ249KixyPScgKyBub25jZSArICcsJ1xuICAgICAgICAgICAgICAgKyAncj0nICsgcmVzLnIgKyAnLHM9JyArIHJlcy5zICsgJyxpPScgKyByZXMuaVxuICAgICAgICAgICAgICAgKyAnLGM9Yml3cyxyPScgKyByZXMuclxuXG4gICAgc2VydmVyU2lnbmF0dXJlID0gKGF3YWl0IGhtYWMoYXdhaXQgaG1hYyhzYWx0ZWRQYXNzd29yZCwgJ1NlcnZlciBLZXknKSwgYXV0aCkpLnRvU3RyaW5nKCdiYXNlNjQnKVxuXG4gICAgY29uc3QgcGF5bG9hZCA9ICdjPWJpd3Mscj0nICsgcmVzLnIgKyAnLHA9JyArIHhvcihcbiAgICAgIGNsaWVudEtleSwgQnVmZmVyLmZyb20oYXdhaXQgaG1hYyhhd2FpdCBzaGEyNTYoY2xpZW50S2V5KSwgYXV0aCkpXG4gICAgKS50b1N0cmluZygnYmFzZTY0JylcblxuICAgIHdyaXRlKFxuICAgICAgYigpLnAoKS5zdHIocGF5bG9hZCkuZW5kKClcbiAgICApXG4gIH1cblxuICBmdW5jdGlvbiBTQVNMRmluYWwoeCkge1xuICAgIGlmICh4LnRvU3RyaW5nKCd1dGY4JywgOSkuc3BsaXQoYi5OLCAxKVswXS5zbGljZSgyKSA9PT0gc2VydmVyU2lnbmF0dXJlKVxuICAgICAgcmV0dXJuXG4gICAgLyogYzggaWdub3JlIG5leHQgNSAqL1xuICAgIGVycm9yZWQoRXJyb3JzLmdlbmVyaWMoJ1NBU0xfU0lHTkFUVVJFX01JU01BVENIJywgJ1RoZSBzZXJ2ZXIgZGlkIG5vdCByZXR1cm4gdGhlIGNvcnJlY3Qgc2lnbmF0dXJlJykpXG4gICAgc29ja2V0LmRlc3Ryb3koKVxuICB9XG5cbiAgZnVuY3Rpb24gUGFzcygpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHR5cGVvZiBvcHRpb25zLnBhc3MgPT09ICdmdW5jdGlvbidcbiAgICAgID8gb3B0aW9ucy5wYXNzKClcbiAgICAgIDogb3B0aW9ucy5wYXNzXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gTm9EYXRhKCkge1xuICAgIHJlc3VsdC5zdGF0ZW1lbnQgPSBxdWVyeS5zdGF0ZW1lbnRcbiAgICByZXN1bHQuc3RhdGVtZW50LmNvbHVtbnMgPSBbXVxuICAgIGlmIChxdWVyeS5vbmx5RGVzY3JpYmUpXG4gICAgICByZXR1cm4gKHF1ZXJ5LnJlc29sdmUocXVlcnkuc3RhdGVtZW50KSwgd3JpdGUoU3luYykpXG4gIH1cblxuICBmdW5jdGlvbiBCYWNrZW5kS2V5RGF0YSh4KSB7XG4gICAgYmFja2VuZC5waWQgPSB4LnJlYWRVSW50MzJCRSg1KVxuICAgIGJhY2tlbmQuc2VjcmV0ID0geC5yZWFkVUludDMyQkUoOSlcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGZldGNoQXJyYXlUeXBlcygpIHtcbiAgICBuZWVkc1R5cGVzID0gZmFsc2VcbiAgICBjb25zdCB0eXBlcyA9IGF3YWl0IG5ldyBRdWVyeShbYFxuICAgICAgc2VsZWN0IGIub2lkLCBiLnR5cGFycmF5XG4gICAgICBmcm9tIHBnX2NhdGFsb2cucGdfdHlwZSBhXG4gICAgICBsZWZ0IGpvaW4gcGdfY2F0YWxvZy5wZ190eXBlIGIgb24gYi5vaWQgPSBhLnR5cGVsZW1cbiAgICAgIHdoZXJlIGEudHlwY2F0ZWdvcnkgPSAnQSdcbiAgICAgIGdyb3VwIGJ5IGIub2lkLCBiLnR5cGFycmF5XG4gICAgICBvcmRlciBieSBiLm9pZFxuICAgIGBdLCBbXSwgZXhlY3V0ZSlcbiAgICB0eXBlcy5mb3JFYWNoKCh7IG9pZCwgdHlwYXJyYXkgfSkgPT4gYWRkQXJyYXlUeXBlKG9pZCwgdHlwYXJyYXkpKVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkQXJyYXlUeXBlKG9pZCwgdHlwYXJyYXkpIHtcbiAgICBpZiAoISFvcHRpb25zLnBhcnNlcnNbdHlwYXJyYXldICYmICEhb3B0aW9ucy5zZXJpYWxpemVyc1t0eXBhcnJheV0pIHJldHVyblxuICAgIGNvbnN0IHBhcnNlciA9IG9wdGlvbnMucGFyc2Vyc1tvaWRdXG4gICAgb3B0aW9ucy5zaGFyZWQudHlwZUFycmF5TWFwW29pZF0gPSB0eXBhcnJheVxuICAgIG9wdGlvbnMucGFyc2Vyc1t0eXBhcnJheV0gPSAoeHMpID0+IGFycmF5UGFyc2VyKHhzLCBwYXJzZXIsIHR5cGFycmF5KVxuICAgIG9wdGlvbnMucGFyc2Vyc1t0eXBhcnJheV0uYXJyYXkgPSB0cnVlXG4gICAgb3B0aW9ucy5zZXJpYWxpemVyc1t0eXBhcnJheV0gPSAoeHMpID0+IGFycmF5U2VyaWFsaXplcih4cywgb3B0aW9ucy5zZXJpYWxpemVyc1tvaWRdLCBvcHRpb25zLCB0eXBhcnJheSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyeU5leHQoeCwgeHMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgKHggPT09ICdyZWFkLXdyaXRlJyAmJiB4cy5kZWZhdWx0X3RyYW5zYWN0aW9uX3JlYWRfb25seSA9PT0gJ29uJykgfHxcbiAgICAgICh4ID09PSAncmVhZC1vbmx5JyAmJiB4cy5kZWZhdWx0X3RyYW5zYWN0aW9uX3JlYWRfb25seSA9PT0gJ29mZicpIHx8XG4gICAgICAoeCA9PT0gJ3ByaW1hcnknICYmIHhzLmluX2hvdF9zdGFuZGJ5ID09PSAnb24nKSB8fFxuICAgICAgKHggPT09ICdzdGFuZGJ5JyAmJiB4cy5pbl9ob3Rfc3RhbmRieSA9PT0gJ29mZicpIHx8XG4gICAgICAoeCA9PT0gJ3ByZWZlci1zdGFuZGJ5JyAmJiB4cy5pbl9ob3Rfc3RhbmRieSA9PT0gJ29mZicgJiYgb3B0aW9ucy5ob3N0W3JldHJpZXNdKVxuICAgIClcbiAgfVxuXG4gIGZ1bmN0aW9uIGZldGNoU3RhdGUoKSB7XG4gICAgY29uc3QgcXVlcnkgPSBuZXcgUXVlcnkoW2BcbiAgICAgIHNob3cgdHJhbnNhY3Rpb25fcmVhZF9vbmx5O1xuICAgICAgc2VsZWN0IHBnX2NhdGFsb2cucGdfaXNfaW5fcmVjb3ZlcnkoKVxuICAgIGBdLCBbXSwgZXhlY3V0ZSwgbnVsbCwgeyBzaW1wbGU6IHRydWUgfSlcbiAgICBxdWVyeS5yZXNvbHZlID0gKFtbYV0sIFtiXV0pID0+IHtcbiAgICAgIGJhY2tlbmRQYXJhbWV0ZXJzLmRlZmF1bHRfdHJhbnNhY3Rpb25fcmVhZF9vbmx5ID0gYS50cmFuc2FjdGlvbl9yZWFkX29ubHlcbiAgICAgIGJhY2tlbmRQYXJhbWV0ZXJzLmluX2hvdF9zdGFuZGJ5ID0gYi5wZ19pc19pbl9yZWNvdmVyeSA/ICdvbicgOiAnb2ZmJ1xuICAgIH1cbiAgICBxdWVyeS5leGVjdXRlKClcbiAgfVxuXG4gIGZ1bmN0aW9uIEVycm9yUmVzcG9uc2UoeCkge1xuICAgIHF1ZXJ5ICYmIChxdWVyeS5jdXJzb3JGbiB8fCBxdWVyeS5kZXNjcmliZUZpcnN0KSAmJiB3cml0ZShTeW5jKVxuICAgIGNvbnN0IGVycm9yID0gRXJyb3JzLnBvc3RncmVzKHBhcnNlRXJyb3IoeCkpXG4gICAgcXVlcnkgJiYgcXVlcnkucmV0cmllZFxuICAgICAgPyBlcnJvcmVkKHF1ZXJ5LnJldHJpZWQpXG4gICAgICA6IHF1ZXJ5ICYmIHJldHJ5Um91dGluZXMuaGFzKGVycm9yLnJvdXRpbmUpXG4gICAgICAgID8gcmV0cnkocXVlcnksIGVycm9yKVxuICAgICAgICA6IGVycm9yZWQoZXJyb3IpXG4gIH1cblxuICBmdW5jdGlvbiByZXRyeShxLCBlcnJvcikge1xuICAgIGRlbGV0ZSBzdGF0ZW1lbnRzW3Euc2lnbmF0dXJlXVxuICAgIHEucmV0cmllZCA9IGVycm9yXG4gICAgZXhlY3V0ZShxKVxuICB9XG5cbiAgZnVuY3Rpb24gTm90aWZpY2F0aW9uUmVzcG9uc2UoeCkge1xuICAgIGlmICghb25ub3RpZnkpXG4gICAgICByZXR1cm5cblxuICAgIGxldCBpbmRleCA9IDlcbiAgICB3aGlsZSAoeFtpbmRleCsrXSAhPT0gMCk7XG4gICAgb25ub3RpZnkoXG4gICAgICB4LnRvU3RyaW5nKCd1dGY4JywgOSwgaW5kZXggLSAxKSxcbiAgICAgIHgudG9TdHJpbmcoJ3V0ZjgnLCBpbmRleCwgeC5sZW5ndGggLSAxKVxuICAgIClcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIFBvcnRhbFN1c3BlbmRlZCgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeCA9IGF3YWl0IFByb21pc2UucmVzb2x2ZShxdWVyeS5jdXJzb3JGbihyZXN1bHQpKVxuICAgICAgcm93cyA9IDBcbiAgICAgIHggPT09IENMT1NFXG4gICAgICAgID8gd3JpdGUoQ2xvc2UocXVlcnkucG9ydGFsKSlcbiAgICAgICAgOiAocmVzdWx0ID0gbmV3IFJlc3VsdCgpLCB3cml0ZShFeGVjdXRlKCcnLCBxdWVyeS5jdXJzb3JSb3dzKSkpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICB3cml0ZShTeW5jKVxuICAgICAgcXVlcnkucmVqZWN0KGVycilcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBDbG9zZUNvbXBsZXRlKCkge1xuICAgIHJlc3VsdC5jb3VudCAmJiBxdWVyeS5jdXJzb3JGbihyZXN1bHQpXG4gICAgcXVlcnkucmVzb2x2ZShyZXN1bHQpXG4gIH1cblxuICBmdW5jdGlvbiBDb3B5SW5SZXNwb25zZSgpIHtcbiAgICBzdHJlYW0gPSBuZXcgU3RyZWFtLldyaXRhYmxlKHtcbiAgICAgIGF1dG9EZXN0cm95OiB0cnVlLFxuICAgICAgd3JpdGUoY2h1bmssIGVuY29kaW5nLCBjYWxsYmFjaykge1xuICAgICAgICBzb2NrZXQud3JpdGUoYigpLmQoKS5yYXcoY2h1bmspLmVuZCgpLCBjYWxsYmFjaylcbiAgICAgIH0sXG4gICAgICBkZXN0cm95KGVycm9yLCBjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFjayhlcnJvcilcbiAgICAgICAgc29ja2V0LndyaXRlKGIoKS5mKCkuc3RyKGVycm9yICsgYi5OKS5lbmQoKSlcbiAgICAgICAgc3RyZWFtID0gbnVsbFxuICAgICAgfSxcbiAgICAgIGZpbmFsKGNhbGxiYWNrKSB7XG4gICAgICAgIHNvY2tldC53cml0ZShiKCkuYygpLmVuZCgpKVxuICAgICAgICBmaW5hbCA9IGNhbGxiYWNrXG4gICAgICB9XG4gICAgfSlcbiAgICBxdWVyeS5yZXNvbHZlKHN0cmVhbSlcbiAgfVxuXG4gIGZ1bmN0aW9uIENvcHlPdXRSZXNwb25zZSgpIHtcbiAgICBzdHJlYW0gPSBuZXcgU3RyZWFtLlJlYWRhYmxlKHtcbiAgICAgIHJlYWQoKSB7IHNvY2tldC5yZXN1bWUoKSB9XG4gICAgfSlcbiAgICBxdWVyeS5yZXNvbHZlKHN0cmVhbSlcbiAgfVxuXG4gIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgZnVuY3Rpb24gQ29weUJvdGhSZXNwb25zZSgpIHtcbiAgICBzdHJlYW0gPSBuZXcgU3RyZWFtLkR1cGxleCh7XG4gICAgICBhdXRvRGVzdHJveTogdHJ1ZSxcbiAgICAgIHJlYWQoKSB7IHNvY2tldC5yZXN1bWUoKSB9LFxuICAgICAgLyogYzggaWdub3JlIG5leHQgMTEgKi9cbiAgICAgIHdyaXRlKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICAgICAgc29ja2V0LndyaXRlKGIoKS5kKCkucmF3KGNodW5rKS5lbmQoKSwgY2FsbGJhY2spXG4gICAgICB9LFxuICAgICAgZGVzdHJveShlcnJvciwgY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soZXJyb3IpXG4gICAgICAgIHNvY2tldC53cml0ZShiKCkuZigpLnN0cihlcnJvciArIGIuTikuZW5kKCkpXG4gICAgICAgIHN0cmVhbSA9IG51bGxcbiAgICAgIH0sXG4gICAgICBmaW5hbChjYWxsYmFjaykge1xuICAgICAgICBzb2NrZXQud3JpdGUoYigpLmMoKS5lbmQoKSlcbiAgICAgICAgZmluYWwgPSBjYWxsYmFja1xuICAgICAgfVxuICAgIH0pXG4gICAgcXVlcnkucmVzb2x2ZShzdHJlYW0pXG4gIH1cblxuICBmdW5jdGlvbiBDb3B5RGF0YSh4KSB7XG4gICAgc3RyZWFtICYmIChzdHJlYW0ucHVzaCh4LnN1YmFycmF5KDUpKSB8fCBzb2NrZXQucGF1c2UoKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIENvcHlEb25lKCkge1xuICAgIHN0cmVhbSAmJiBzdHJlYW0ucHVzaChudWxsKVxuICAgIHN0cmVhbSA9IG51bGxcbiAgfVxuXG4gIGZ1bmN0aW9uIE5vdGljZVJlc3BvbnNlKHgpIHtcbiAgICBvbm5vdGljZVxuICAgICAgPyBvbm5vdGljZShwYXJzZUVycm9yKHgpKVxuICAgICAgOiBjb25zb2xlLmxvZyhwYXJzZUVycm9yKHgpKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgfVxuXG4gIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgZnVuY3Rpb24gRW1wdHlRdWVyeVJlc3BvbnNlKCkge1xuICAgIC8qIG5vb3AgKi9cbiAgfVxuXG4gIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgZnVuY3Rpb24gRnVuY3Rpb25DYWxsUmVzcG9uc2UoKSB7XG4gICAgZXJyb3JlZChFcnJvcnMubm90U3VwcG9ydGVkKCdGdW5jdGlvbkNhbGxSZXNwb25zZScpKVxuICB9XG5cbiAgLyogYzggaWdub3JlIG5leHQgMyAqL1xuICBmdW5jdGlvbiBOZWdvdGlhdGVQcm90b2NvbFZlcnNpb24oKSB7XG4gICAgZXJyb3JlZChFcnJvcnMubm90U3VwcG9ydGVkKCdOZWdvdGlhdGVQcm90b2NvbFZlcnNpb24nKSlcbiAgfVxuXG4gIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgZnVuY3Rpb24gVW5rbm93bk1lc3NhZ2UoeCkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1Bvc3RncmVzLmpzIDogVW5rbm93biBNZXNzYWdlOicsIHhbMF0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgfVxuXG4gIC8qIGM4IGlnbm9yZSBuZXh0IDMgKi9cbiAgZnVuY3Rpb24gVW5rbm93bkF1dGgoeCwgdHlwZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1Bvc3RncmVzLmpzIDogVW5rbm93biBBdXRoOicsIHR5cGUpIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgfVxuXG4gIC8qIE1lc3NhZ2VzICovXG4gIGZ1bmN0aW9uIEJpbmQocGFyYW1ldGVycywgdHlwZXMsIHN0YXRlbWVudCA9ICcnLCBwb3J0YWwgPSAnJykge1xuICAgIGxldCBwcmV2XG4gICAgICAsIHR5cGVcblxuICAgIGIoKS5CKCkuc3RyKHBvcnRhbCArIGIuTikuc3RyKHN0YXRlbWVudCArIGIuTikuaTE2KDApLmkxNihwYXJhbWV0ZXJzLmxlbmd0aClcblxuICAgIHBhcmFtZXRlcnMuZm9yRWFjaCgoeCwgaSkgPT4ge1xuICAgICAgaWYgKHggPT09IG51bGwpXG4gICAgICAgIHJldHVybiBiLmkzMigweEZGRkZGRkZGKVxuXG4gICAgICB0eXBlID0gdHlwZXNbaV1cbiAgICAgIHBhcmFtZXRlcnNbaV0gPSB4ID0gdHlwZSBpbiBvcHRpb25zLnNlcmlhbGl6ZXJzXG4gICAgICAgID8gb3B0aW9ucy5zZXJpYWxpemVyc1t0eXBlXSh4KVxuICAgICAgICA6ICcnICsgeFxuXG4gICAgICBwcmV2ID0gYi5pXG4gICAgICBiLmluYyg0KS5zdHIoeCkuaTMyKGIuaSAtIHByZXYgLSA0LCBwcmV2KVxuICAgIH0pXG5cbiAgICBiLmkxNigwKVxuXG4gICAgcmV0dXJuIGIuZW5kKClcbiAgfVxuXG4gIGZ1bmN0aW9uIFBhcnNlKHN0ciwgcGFyYW1ldGVycywgdHlwZXMsIG5hbWUgPSAnJykge1xuICAgIGIoKS5QKCkuc3RyKG5hbWUgKyBiLk4pLnN0cihzdHIgKyBiLk4pLmkxNihwYXJhbWV0ZXJzLmxlbmd0aClcbiAgICBwYXJhbWV0ZXJzLmZvckVhY2goKHgsIGkpID0+IGIuaTMyKHR5cGVzW2ldIHx8IDApKVxuICAgIHJldHVybiBiLmVuZCgpXG4gIH1cblxuICBmdW5jdGlvbiBEZXNjcmliZSh4LCBuYW1lID0gJycpIHtcbiAgICByZXR1cm4gYigpLkQoKS5zdHIoeCkuc3RyKG5hbWUgKyBiLk4pLmVuZCgpXG4gIH1cblxuICBmdW5jdGlvbiBFeGVjdXRlKHBvcnRhbCA9ICcnLCByb3dzID0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuY29uY2F0KFtcbiAgICAgIGIoKS5FKCkuc3RyKHBvcnRhbCArIGIuTikuaTMyKHJvd3MpLmVuZCgpLFxuICAgICAgRmx1c2hcbiAgICBdKVxuICB9XG5cbiAgZnVuY3Rpb24gQ2xvc2UocG9ydGFsID0gJycpIHtcbiAgICByZXR1cm4gQnVmZmVyLmNvbmNhdChbXG4gICAgICBiKCkuQygpLnN0cignUCcpLnN0cihwb3J0YWwgKyBiLk4pLmVuZCgpLFxuICAgICAgYigpLlMoKS5lbmQoKVxuICAgIF0pXG4gIH1cblxuICBmdW5jdGlvbiBTdGFydHVwTWVzc2FnZSgpIHtcbiAgICByZXR1cm4gY2FuY2VsTWVzc2FnZSB8fCBiKCkuaW5jKDQpLmkxNigzKS56KDIpLnN0cihcbiAgICAgIE9iamVjdC5lbnRyaWVzKE9iamVjdC5hc3NpZ24oe1xuICAgICAgICB1c2VyLFxuICAgICAgICBkYXRhYmFzZSxcbiAgICAgICAgY2xpZW50X2VuY29kaW5nOiAnVVRGOCdcbiAgICAgIH0sXG4gICAgICAgIG9wdGlvbnMuY29ubmVjdGlvblxuICAgICAgKSkuZmlsdGVyKChbLCB2XSkgPT4gdikubWFwKChbaywgdl0pID0+IGsgKyBiLk4gKyB2KS5qb2luKGIuTilcbiAgICApLnooMikuZW5kKDApXG4gIH1cblxufVxuXG5mdW5jdGlvbiBwYXJzZUVycm9yKHgpIHtcbiAgY29uc3QgZXJyb3IgPSB7fVxuICBsZXQgc3RhcnQgPSA1XG4gIGZvciAobGV0IGkgPSA1OyBpIDwgeC5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBpZiAoeFtpXSA9PT0gMCkge1xuICAgICAgZXJyb3JbZXJyb3JGaWVsZHNbeFtzdGFydF1dXSA9IHgudG9TdHJpbmcoJ3V0ZjgnLCBzdGFydCArIDEsIGkpXG4gICAgICBzdGFydCA9IGkgKyAxXG4gICAgfVxuICB9XG4gIHJldHVybiBlcnJvclxufVxuXG5mdW5jdGlvbiBtZDUoeCkge1xuICByZXR1cm4gY3J5cHRvLmNyZWF0ZUhhc2goJ21kNScpLnVwZGF0ZSh4KS5kaWdlc3QoJ2hleCcpXG59XG5cbmZ1bmN0aW9uIGhtYWMoa2V5LCB4KSB7XG4gIHJldHVybiBjcnlwdG8uY3JlYXRlSG1hYygnc2hhMjU2Jywga2V5KS51cGRhdGUoeCkuZGlnZXN0KClcbn1cblxuZnVuY3Rpb24gc2hhMjU2KHgpIHtcbiAgcmV0dXJuIGNyeXB0by5jcmVhdGVIYXNoKCdzaGEyNTYnKS51cGRhdGUoeCkuZGlnZXN0KClcbn1cblxuZnVuY3Rpb24geG9yKGEsIGIpIHtcbiAgY29uc3QgbGVuZ3RoID0gTWF0aC5tYXgoYS5sZW5ndGgsIGIubGVuZ3RoKVxuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKVxuICAgIGJ1ZmZlcltpXSA9IGFbaV0gXiBiW2ldXG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gdGltZXIoZm4sIHNlY29uZHMpIHtcbiAgc2Vjb25kcyA9IHR5cGVvZiBzZWNvbmRzID09PSAnZnVuY3Rpb24nID8gc2Vjb25kcygpIDogc2Vjb25kc1xuICBpZiAoIXNlY29uZHMpXG4gICAgcmV0dXJuIHsgY2FuY2VsOiBub29wLCBzdGFydDogbm9vcCB9XG5cbiAgbGV0IHRpbWVyXG4gIHJldHVybiB7XG4gICAgY2FuY2VsKCkge1xuICAgICAgdGltZXIgJiYgKGNsZWFyVGltZW91dCh0aW1lciksIHRpbWVyID0gbnVsbClcbiAgICB9LFxuICAgIHN0YXJ0KCkge1xuICAgICAgdGltZXIgJiYgY2xlYXJUaW1lb3V0KHRpbWVyKVxuICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KGRvbmUsIHNlY29uZHMgKiAxMDAwLCBhcmd1bWVudHMpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZG9uZShhcmdzKSB7XG4gICAgZm4uYXBwbHkobnVsbCwgYXJncylcbiAgICB0aW1lciA9IG51bGxcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm5ldCIsInRscyIsImNyeXB0byIsIlN0cmVhbSIsInBlcmZvcm1hbmNlIiwic3RyaW5naWZ5IiwiaGFuZGxlVmFsdWUiLCJhcnJheVBhcnNlciIsImFycmF5U2VyaWFsaXplciIsIkVycm9ycyIsIlJlc3VsdCIsIlF1ZXVlIiwiUXVlcnkiLCJDTE9TRSIsImIiLCJDb25uZWN0aW9uIiwidWlkIiwiU3luYyIsIlMiLCJlbmQiLCJGbHVzaCIsIkgiLCJTU0xSZXF1ZXN0IiwiaTMyIiwiRXhlY3V0ZVVubmFtZWQiLCJCdWZmZXIiLCJjb25jYXQiLCJFIiwic3RyIiwiTiIsIkRlc2NyaWJlVW5uYW1lZCIsIkQiLCJub29wIiwicmV0cnlSb3V0aW5lcyIsIlNldCIsImVycm9yRmllbGRzIiwib3B0aW9ucyIsInF1ZXVlcyIsIm9ub3BlbiIsIm9uZW5kIiwib25jbG9zZSIsInNzbCIsIm1heCIsInVzZXIiLCJob3N0IiwicG9ydCIsImRhdGFiYXNlIiwicGFyc2VycyIsInRyYW5zZm9ybSIsIm9ubm90aWNlIiwib25ub3RpZnkiLCJvbnBhcmFtZXRlciIsIm1heF9waXBlbGluZSIsImtlZXBfYWxpdmUiLCJiYWNrb2ZmIiwidGFyZ2V0X3Nlc3Npb25fYXR0cnMiLCJzZW50IiwiaWQiLCJiYWNrZW5kIiwicGlkIiwic2VjcmV0IiwiaWRsZVRpbWVyIiwidGltZXIiLCJpZGxlX3RpbWVvdXQiLCJsaWZlVGltZXIiLCJtYXhfbGlmZXRpbWUiLCJjb25uZWN0VGltZXIiLCJjb25uZWN0VGltZWRPdXQiLCJjb25uZWN0X3RpbWVvdXQiLCJzb2NrZXQiLCJjYW5jZWxNZXNzYWdlIiwicmVzdWx0IiwiaW5jb21pbmciLCJhbGxvYyIsIm5lZWRzVHlwZXMiLCJmZXRjaF90eXBlcyIsImJhY2tlbmRQYXJhbWV0ZXJzIiwic3RhdGVtZW50cyIsInN0YXRlbWVudElkIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic2xpY2UiLCJzdGF0ZW1lbnRDb3VudCIsImNsb3NlZERhdGUiLCJyZW1haW5pbmciLCJob3N0SW5kZXgiLCJyZXRyaWVzIiwibGVuZ3RoIiwiZGVsYXkiLCJyb3dzIiwic2VydmVyU2lnbmF0dXJlIiwibmV4dFdyaXRlVGltZXIiLCJ0ZXJtaW5hdGVkIiwiaW5jb21pbmdzIiwicmVzdWx0cyIsImluaXRpYWwiLCJlbmRpbmciLCJzdHJlYW0iLCJjaHVuayIsImVuZGVkIiwibm9uY2UiLCJxdWVyeSIsImZpbmFsIiwiY29ubmVjdGlvbiIsInF1ZXVlIiwiY2xvc2VkIiwiY29ubmVjdCIsInJlY29ubmVjdCIsInRlcm1pbmF0ZSIsImV4ZWN1dGUiLCJjYW5jZWwiLCJjb3VudCIsInB1c2giLCJjcmVhdGVTb2NrZXQiLCJ4IiwiUHJvbWlzZSIsInJlc29sdmUiLCJTb2NrZXQiLCJlIiwiZXJyb3IiLCJvbiIsImRyYWluIiwicmVqZWN0Iiwib25jZSIsInEiLCJxdWVyeUVycm9yIiwiY2FuY2VsbGVkIiwic3RhdGUiLCJhY3RpdmUiLCJidWlsZCIsIndyaXRlIiwidG9CdWZmZXIiLCJkZXNjcmliZUZpcnN0IiwiY3Vyc29yRm4iLCJvbmV4ZWN1dGUiLCJlcnJvcmVkIiwicGFyYW1ldGVycyIsImdlbmVyaWMiLCJzaW1wbGUiLCJRIiwic3RhdGVtZW50Iiwic3RyaW5nIiwiZGVzY3JpYmUiLCJwcmVwYXJlIiwicHJlcGFyZWQiLCJ1bm5hbWVkIiwiUGFyc2UiLCJ0eXBlcyIsIm5hbWUiLCJEZXNjcmliZSIsIkJpbmQiLCJjdXJzb3JOYW1lIiwiRXhlY3V0ZSIsImN1cnNvclJvd3MiLCJzdHJpbmdzIiwiYXJncyIsInRhZ2dlZCIsImZvckVhY2giLCJzaWduYXR1cmUiLCJvbmx5RGVzY3JpYmUiLCJkZWJ1ZyIsImZuIiwiZnJvbSIsIm5leHRXcml0ZSIsInNldEltbWVkaWF0ZSIsImNsZWFySW1tZWRpYXRlIiwiZGVzdHJveSIsInNlY3VyZSIsImNhblNTTCIsInIiLCJjb25uZWN0ZWQiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJzZXJ2ZXJuYW1lIiwiaXNJUCIsInVuZGVmaW5lZCIsInJlamVjdFVuYXV0aG9yaXplZCIsImRhdGEiLCJyZWFkVUludDMyQkUiLCJoYW5kbGUiLCJzdWJhcnJheSIsInN0YXJ0IiwicGF0aCIsInNldFRpbWVvdXQiLCJub3ciLCJzZXRLZWVwQWxpdmUiLCJzIiwiU3RhcnR1cE1lc3NhZ2UiLCJlcnIiLCJjb25uZWN0aW5nIiwic2hpZnQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzIiwic3RhY2siLCJ2YWx1ZSIsIm9yaWdpbiIsInJlcGxhY2UiLCJlbnVtZXJhYmxlIiwicmVzZXJ2ZWQiLCJyZWFkeVN0YXRlIiwicmVtb3ZlTGlzdGVuZXIiLCJYIiwiaGFkRXJyb3IiLCJlbmNyeXB0ZWQiLCJzaGFyZWQiLCJ4cyIsIkRhdGFSb3ciLCJDb3B5RGF0YSIsIk5vdGlmaWNhdGlvblJlc3BvbnNlIiwiUGFyYW1ldGVyU3RhdHVzIiwiUmVhZHlGb3JRdWVyeSIsIkNvbW1hbmRDb21wbGV0ZSIsIkJpbmRDb21wbGV0ZSIsIlBhcnNlQ29tcGxldGUiLCJQYXJhbWV0ZXJEZXNjcmlwdGlvbiIsIlJvd0Rlc2NyaXB0aW9uIiwiQXV0aGVudGljYXRpb24iLCJOb0RhdGEiLCJCYWNrZW5kS2V5RGF0YSIsIkVycm9yUmVzcG9uc2UiLCJQb3J0YWxTdXNwZW5kZWQiLCJDbG9zZUNvbXBsZXRlIiwiQ29weUluUmVzcG9uc2UiLCJOb3RpY2VSZXNwb25zZSIsIkNvcHlPdXRSZXNwb25zZSIsIkNvcHlEb25lIiwiRW1wdHlRdWVyeVJlc3BvbnNlIiwiRnVuY3Rpb25DYWxsUmVzcG9uc2UiLCJOZWdvdGlhdGVQcm90b2NvbFZlcnNpb24iLCJDb3B5Qm90aFJlc3BvbnNlIiwiVW5rbm93bk1lc3NhZ2UiLCJpbmRleCIsImNvbHVtbiIsInJvdyIsImlzUmF3IiwiQXJyYXkiLCJjb2x1bW5zIiwiaSIsInJlYWRJbnQzMkJFIiwicGFyc2VyIiwiYXJyYXkiLCJmb3JFYWNoRm4iLCJrIiwidiIsInNwbGl0IiwiaW5faG90X3N0YW5kYnkiLCJkZWZhdWx0X3RyYW5zYWN0aW9uX3JlYWRfb25seSIsImZldGNoU3RhdGUiLCJ0cnlOZXh0IiwiZmV0Y2hBcnJheVR5cGVzIiwicmVsZWFzZSIsImNvbW1hbmQiLCJwYXJzaW5nIiwicmVhZFVJbnQxNkJFIiwidGFibGUiLCJudW1iZXIiLCJ0eXBlIiwiQXV0aGVudGljYXRpb25DbGVhcnRleHRQYXNzd29yZCIsIkF1dGhlbnRpY2F0aW9uTUQ1UGFzc3dvcmQiLCJTQVNMIiwiU0FTTENvbnRpbnVlIiwiU0FTTEZpbmFsIiwiVW5rbm93bkF1dGgiLCJwYXlsb2FkIiwiUGFzcyIsInAiLCJ6IiwibWQ1IiwicmFuZG9tQnl0ZXMiLCJpbmMiLCJyZXMiLCJyZWR1Y2UiLCJhY2MiLCJzYWx0ZWRQYXNzd29yZCIsInBia2RmMlN5bmMiLCJwYXJzZUludCIsImNsaWVudEtleSIsImhtYWMiLCJhdXRoIiwieG9yIiwic2hhMjU2IiwicGFzcyIsIm9pZCIsInR5cGFycmF5IiwiYWRkQXJyYXlUeXBlIiwic2VyaWFsaXplcnMiLCJ0eXBlQXJyYXlNYXAiLCJhIiwidHJhbnNhY3Rpb25fcmVhZF9vbmx5IiwicGdfaXNfaW5fcmVjb3ZlcnkiLCJwb3N0Z3JlcyIsInBhcnNlRXJyb3IiLCJyZXRyaWVkIiwiaGFzIiwicm91dGluZSIsInJldHJ5IiwiQ2xvc2UiLCJwb3J0YWwiLCJXcml0YWJsZSIsImF1dG9EZXN0cm95IiwiZW5jb2RpbmciLCJjYWxsYmFjayIsImQiLCJyYXciLCJmIiwiYyIsIlJlYWRhYmxlIiwicmVhZCIsInJlc3VtZSIsIkR1cGxleCIsInBhdXNlIiwiY29uc29sZSIsImxvZyIsIm5vdFN1cHBvcnRlZCIsInByZXYiLCJCIiwiaTE2IiwiUCIsIkMiLCJlbnRyaWVzIiwiYXNzaWduIiwiY2xpZW50X2VuY29kaW5nIiwiZmlsdGVyIiwibWFwIiwiam9pbiIsImNyZWF0ZUhhc2giLCJ1cGRhdGUiLCJkaWdlc3QiLCJrZXkiLCJjcmVhdGVIbWFjIiwiYnVmZmVyIiwiYWxsb2NVbnNhZmUiLCJzZWNvbmRzIiwiY2xlYXJUaW1lb3V0IiwiZG9uZSIsImFyZ3VtZW50cyIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/connection.js\n',
      );

      /***/
    },

  /***/ '(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/errors.js':
    /*!***********************************************************************************!*\
  !*** ../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/errors.js ***!
  \***********************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Errors: () => (/* binding */ Errors),\n/* harmony export */   PostgresError: () => (/* binding */ PostgresError)\n/* harmony export */ });\nclass PostgresError extends Error {\n    constructor(x){\n        super(x.message);\n        this.name = this.constructor.name;\n        Object.assign(this, x);\n    }\n}\nconst Errors = {\n    connection,\n    postgres,\n    generic,\n    notSupported\n};\nfunction connection(x, options, socket) {\n    const { host, port } = socket || options;\n    const error = Object.assign(new Error("write " + x + " " + (options.path || host + ":" + port)), {\n        code: x,\n        errno: x,\n        address: options.path || host\n    }, options.path ? {} : {\n        port: port\n    });\n    Error.captureStackTrace(error, connection);\n    return error;\n}\nfunction postgres(x) {\n    const error = new PostgresError(x);\n    Error.captureStackTrace(error, postgres);\n    return error;\n}\nfunction generic(code, message) {\n    const error = Object.assign(new Error(code + ": " + message), {\n        code\n    });\n    Error.captureStackTrace(error, generic);\n    return error;\n}\n/* c8 ignore next 10 */ function notSupported(x) {\n    const error = Object.assign(new Error(x + " (B) is not supported"), {\n        code: "MESSAGE_NOT_SUPPORTED",\n        name: x\n    });\n    Error.captureStackTrace(error, notSupported);\n    return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Bvc3RncmVzQDMuNC4zL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sTUFBTUEsc0JBQXNCQztJQUNqQ0MsWUFBWUMsQ0FBQyxDQUFFO1FBQ2IsS0FBSyxDQUFDQSxFQUFFQyxPQUFPO1FBQ2YsSUFBSSxDQUFDQyxJQUFJLEdBQUcsSUFBSSxDQUFDSCxXQUFXLENBQUNHLElBQUk7UUFDakNDLE9BQU9DLE1BQU0sQ0FBQyxJQUFJLEVBQUVKO0lBQ3RCO0FBQ0Y7QUFFTyxNQUFNSyxTQUFTO0lBQ3BCQztJQUNBQztJQUNBQztJQUNBQztBQUNGLEVBQUM7QUFFRCxTQUFTSCxXQUFXTixDQUFDLEVBQUVVLE9BQU8sRUFBRUMsTUFBTTtJQUNwQyxNQUFNLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFLEdBQUdGLFVBQVVEO0lBQ2pDLE1BQU1JLFFBQVFYLE9BQU9DLE1BQU0sQ0FDekIsSUFBSU4sTUFBTyxXQUFXRSxJQUFJLE1BQU9VLENBQUFBLFFBQVFLLElBQUksSUFBS0gsT0FBTyxNQUFNQyxJQUFJLElBQ25FO1FBQ0VHLE1BQU1oQjtRQUNOaUIsT0FBT2pCO1FBQ1BrQixTQUFTUixRQUFRSyxJQUFJLElBQUlIO0lBQzNCLEdBQUdGLFFBQVFLLElBQUksR0FBRyxDQUFDLElBQUk7UUFBRUYsTUFBTUE7SUFBSztJQUV0Q2YsTUFBTXFCLGlCQUFpQixDQUFDTCxPQUFPUjtJQUMvQixPQUFPUTtBQUNUO0FBRUEsU0FBU1AsU0FBU1AsQ0FBQztJQUNqQixNQUFNYyxRQUFRLElBQUlqQixjQUFjRztJQUNoQ0YsTUFBTXFCLGlCQUFpQixDQUFDTCxPQUFPUDtJQUMvQixPQUFPTztBQUNUO0FBRUEsU0FBU04sUUFBUVEsSUFBSSxFQUFFZixPQUFPO0lBQzVCLE1BQU1hLFFBQVFYLE9BQU9DLE1BQU0sQ0FBQyxJQUFJTixNQUFNa0IsT0FBTyxPQUFPZixVQUFVO1FBQUVlO0lBQUs7SUFDckVsQixNQUFNcUIsaUJBQWlCLENBQUNMLE9BQU9OO0lBQy9CLE9BQU9NO0FBQ1Q7QUFFQSxxQkFBcUIsR0FDckIsU0FBU0wsYUFBYVQsQ0FBQztJQUNyQixNQUFNYyxRQUFRWCxPQUFPQyxNQUFNLENBQ3pCLElBQUlOLE1BQU1FLElBQUksMEJBQ2Q7UUFDRWdCLE1BQU07UUFDTmQsTUFBTUY7SUFDUjtJQUVGRixNQUFNcUIsaUJBQWlCLENBQUNMLE9BQU9MO0lBQy9CLE9BQU9LO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWNtZS9uZXh0anMvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Bvc3RncmVzQDMuNC4zL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvZXJyb3JzLmpzPzEzMDMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFBvc3RncmVzRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGNvbnN0cnVjdG9yKHgpIHtcbiAgICBzdXBlcih4Lm1lc3NhZ2UpXG4gICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB4KVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBFcnJvcnMgPSB7XG4gIGNvbm5lY3Rpb24sXG4gIHBvc3RncmVzLFxuICBnZW5lcmljLFxuICBub3RTdXBwb3J0ZWRcbn1cblxuZnVuY3Rpb24gY29ubmVjdGlvbih4LCBvcHRpb25zLCBzb2NrZXQpIHtcbiAgY29uc3QgeyBob3N0LCBwb3J0IH0gPSBzb2NrZXQgfHwgb3B0aW9uc1xuICBjb25zdCBlcnJvciA9IE9iamVjdC5hc3NpZ24oXG4gICAgbmV3IEVycm9yKCgnd3JpdGUgJyArIHggKyAnICcgKyAob3B0aW9ucy5wYXRoIHx8IChob3N0ICsgJzonICsgcG9ydCkpKSksXG4gICAge1xuICAgICAgY29kZTogeCxcbiAgICAgIGVycm5vOiB4LFxuICAgICAgYWRkcmVzczogb3B0aW9ucy5wYXRoIHx8IGhvc3RcbiAgICB9LCBvcHRpb25zLnBhdGggPyB7fSA6IHsgcG9ydDogcG9ydCB9XG4gIClcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyb3IsIGNvbm5lY3Rpb24pXG4gIHJldHVybiBlcnJvclxufVxuXG5mdW5jdGlvbiBwb3N0Z3Jlcyh4KSB7XG4gIGNvbnN0IGVycm9yID0gbmV3IFBvc3RncmVzRXJyb3IoeClcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyb3IsIHBvc3RncmVzKVxuICByZXR1cm4gZXJyb3Jcbn1cblxuZnVuY3Rpb24gZ2VuZXJpYyhjb2RlLCBtZXNzYWdlKSB7XG4gIGNvbnN0IGVycm9yID0gT2JqZWN0LmFzc2lnbihuZXcgRXJyb3IoY29kZSArICc6ICcgKyBtZXNzYWdlKSwgeyBjb2RlIH0pXG4gIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKGVycm9yLCBnZW5lcmljKVxuICByZXR1cm4gZXJyb3Jcbn1cblxuLyogYzggaWdub3JlIG5leHQgMTAgKi9cbmZ1bmN0aW9uIG5vdFN1cHBvcnRlZCh4KSB7XG4gIGNvbnN0IGVycm9yID0gT2JqZWN0LmFzc2lnbihcbiAgICBuZXcgRXJyb3IoeCArICcgKEIpIGlzIG5vdCBzdXBwb3J0ZWQnKSxcbiAgICB7XG4gICAgICBjb2RlOiAnTUVTU0FHRV9OT1RfU1VQUE9SVEVEJyxcbiAgICAgIG5hbWU6IHhcbiAgICB9XG4gIClcbiAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoZXJyb3IsIG5vdFN1cHBvcnRlZClcbiAgcmV0dXJuIGVycm9yXG59XG4iXSwibmFtZXMiOlsiUG9zdGdyZXNFcnJvciIsIkVycm9yIiwiY29uc3RydWN0b3IiLCJ4IiwibWVzc2FnZSIsIm5hbWUiLCJPYmplY3QiLCJhc3NpZ24iLCJFcnJvcnMiLCJjb25uZWN0aW9uIiwicG9zdGdyZXMiLCJnZW5lcmljIiwibm90U3VwcG9ydGVkIiwib3B0aW9ucyIsInNvY2tldCIsImhvc3QiLCJwb3J0IiwiZXJyb3IiLCJwYXRoIiwiY29kZSIsImVycm5vIiwiYWRkcmVzcyIsImNhcHR1cmVTdGFja1RyYWNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/errors.js\n',
      );

      /***/
    },

  /***/ '(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/index.js':
    /*!**********************************************************************************!*\
  !*** ../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/index.js ***!
  \**********************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ "os");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fs */ "fs");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./types.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/types.js");\n/* harmony import */ var _connection_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./connection.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/connection.js");\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./query.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/query.js");\n/* harmony import */ var _queue_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./queue.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/queue.js");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./errors.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/errors.js");\n/* harmony import */ var _subscribe_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./subscribe.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/subscribe.js");\n/* harmony import */ var _large_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./large.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/large.js");\n\n\n\n\n\n\n\n\n\nObject.assign(Postgres, {\n    PostgresError: _errors_js__WEBPACK_IMPORTED_MODULE_6__.PostgresError,\n    toPascal: _types_js__WEBPACK_IMPORTED_MODULE_2__.toPascal,\n    pascal: _types_js__WEBPACK_IMPORTED_MODULE_2__.pascal,\n    toCamel: _types_js__WEBPACK_IMPORTED_MODULE_2__.toCamel,\n    camel: _types_js__WEBPACK_IMPORTED_MODULE_2__.camel,\n    toKebab: _types_js__WEBPACK_IMPORTED_MODULE_2__.toKebab,\n    kebab: _types_js__WEBPACK_IMPORTED_MODULE_2__.kebab,\n    fromPascal: _types_js__WEBPACK_IMPORTED_MODULE_2__.fromPascal,\n    fromCamel: _types_js__WEBPACK_IMPORTED_MODULE_2__.fromCamel,\n    fromKebab: _types_js__WEBPACK_IMPORTED_MODULE_2__.fromKebab,\n    BigInt: {\n        to: 20,\n        from: [\n            20\n        ],\n        parse: (x)=>BigInt(x),\n        serialize: (x)=>x.toString()\n    }\n});\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Postgres);\nfunction Postgres(a, b) {\n    const options = parseOptions(a, b), subscribe = options.no_subscribe || (0,_subscribe_js__WEBPACK_IMPORTED_MODULE_7__["default"])(Postgres, {\n        ...options\n    });\n    let ending = false;\n    const queries = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__["default"])(), connecting = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__["default"])(), reserved = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__["default"])(), closed = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__["default"])(), ended = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__["default"])(), open = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__["default"])(), busy = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__["default"])(), full = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__["default"])(), queues = {\n        connecting,\n        reserved,\n        closed,\n        ended,\n        open,\n        busy,\n        full\n    };\n    const connections = [\n        ...Array(options.max)\n    ].map(()=>(0,_connection_js__WEBPACK_IMPORTED_MODULE_3__["default"])(options, queues, {\n            onopen,\n            onend,\n            onclose\n        }));\n    const sql = Sql(handler);\n    Object.assign(sql, {\n        get parameters () {\n            return options.parameters;\n        },\n        largeObject: _large_js__WEBPACK_IMPORTED_MODULE_8__["default"].bind(null, sql),\n        subscribe,\n        CLOSE: _query_js__WEBPACK_IMPORTED_MODULE_4__.CLOSE,\n        END: _query_js__WEBPACK_IMPORTED_MODULE_4__.CLOSE,\n        PostgresError: _errors_js__WEBPACK_IMPORTED_MODULE_6__.PostgresError,\n        options,\n        reserve,\n        listen,\n        begin,\n        close,\n        end\n    });\n    return sql;\n    function Sql(handler) {\n        handler.debug = options.debug;\n        Object.entries(options.types).reduce((acc, [name, type])=>{\n            acc[name] = (x)=>new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(x, type.to);\n            return acc;\n        }, typed);\n        Object.assign(sql, {\n            types: typed,\n            typed,\n            unsafe,\n            notify,\n            array,\n            json,\n            file\n        });\n        return sql;\n        function typed(value, type) {\n            return new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(value, type);\n        }\n        function sql(strings, ...args) {\n            const query = strings && Array.isArray(strings.raw) ? new _query_js__WEBPACK_IMPORTED_MODULE_4__.Query(strings, args, handler, cancel) : typeof strings === "string" && !args.length ? new _types_js__WEBPACK_IMPORTED_MODULE_2__.Identifier(options.transform.column.to ? options.transform.column.to(strings) : strings) : new _types_js__WEBPACK_IMPORTED_MODULE_2__.Builder(strings, args);\n            return query;\n        }\n        function unsafe(string, args = [], options = {}) {\n            arguments.length === 2 && !Array.isArray(args) && (options = args, args = []);\n            const query = new _query_js__WEBPACK_IMPORTED_MODULE_4__.Query([\n                string\n            ], args, handler, cancel, {\n                prepare: false,\n                ...options,\n                simple: "simple" in options ? options.simple : args.length === 0\n            });\n            return query;\n        }\n        function file(path, args = [], options = {}) {\n            arguments.length === 2 && !Array.isArray(args) && (options = args, args = []);\n            const query = new _query_js__WEBPACK_IMPORTED_MODULE_4__.Query([], args, (query)=>{\n                fs__WEBPACK_IMPORTED_MODULE_1__.readFile(path, "utf8", (err, string)=>{\n                    if (err) return query.reject(err);\n                    query.strings = [\n                        string\n                    ];\n                    handler(query);\n                });\n            }, cancel, {\n                ...options,\n                simple: "simple" in options ? options.simple : args.length === 0\n            });\n            return query;\n        }\n    }\n    async function listen(name, fn, onlisten) {\n        const listener = {\n            fn,\n            onlisten\n        };\n        const sql = listen.sql || (listen.sql = Postgres({\n            ...options,\n            max: 1,\n            idle_timeout: null,\n            max_lifetime: null,\n            fetch_types: false,\n            onclose () {\n                Object.entries(listen.channels).forEach(([name, { listeners }])=>{\n                    delete listen.channels[name];\n                    Promise.all(listeners.map((l)=>listen(name, l.fn, l.onlisten).catch(()=>{})));\n                });\n            },\n            onnotify (c, x) {\n                c in listen.channels && listen.channels[c].listeners.forEach((l)=>l.fn(x));\n            }\n        }));\n        const channels = listen.channels || (listen.channels = {}), exists = name in channels;\n        if (exists) {\n            channels[name].listeners.push(listener);\n            const result = await channels[name].result;\n            listener.onlisten && listener.onlisten();\n            return {\n                state: result.state,\n                unlisten\n            };\n        }\n        channels[name] = {\n            result: sql`listen ${sql.unsafe(\'"\' + name.replace(/"/g, \'""\') + \'"\')}`,\n            listeners: [\n                listener\n            ]\n        };\n        const result = await channels[name].result;\n        listener.onlisten && listener.onlisten();\n        return {\n            state: result.state,\n            unlisten\n        };\n        async function unlisten() {\n            if (name in channels === false) return;\n            channels[name].listeners = channels[name].listeners.filter((x)=>x !== listener);\n            if (channels[name].listeners.length) return;\n            delete channels[name];\n            return sql`unlisten ${sql.unsafe(\'"\' + name.replace(/"/g, \'""\') + \'"\')}`;\n        }\n    }\n    async function notify(channel, payload) {\n        return await sql`select pg_notify(${channel}, ${"" + payload})`;\n    }\n    async function reserve() {\n        const queue = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__["default"])();\n        const c = open.length ? open.shift() : await new Promise((r)=>{\n            queries.push({\n                reserve: r\n            });\n            closed.length && connect(closed.shift());\n        });\n        move(c, reserved);\n        c.reserved = ()=>queue.length ? c.execute(queue.shift()) : move(c, reserved);\n        c.reserved.release = true;\n        const sql = Sql(handler);\n        sql.release = ()=>{\n            c.reserved = null;\n            onopen(c);\n        };\n        return sql;\n        function handler(q) {\n            c.queue === full ? queue.push(q) : c.execute(q) || move(c, full);\n        }\n    }\n    async function begin(options, fn) {\n        !fn && (fn = options, options = "");\n        const queries = (0,_queue_js__WEBPACK_IMPORTED_MODULE_5__["default"])();\n        let savepoints = 0, connection, prepare = null;\n        try {\n            await sql.unsafe("begin " + options.replace(/[^a-z ]/ig, ""), [], {\n                onexecute\n            }).execute();\n            return await Promise.race([\n                scope(connection, fn),\n                new Promise((_, reject)=>connection.onclose = reject)\n            ]);\n        } catch (error) {\n            throw error;\n        }\n        async function scope(c, fn, name) {\n            const sql = Sql(handler);\n            sql.savepoint = savepoint;\n            sql.prepare = (x)=>prepare = x.replace(/[^a-z0-9$-_. ]/gi);\n            let uncaughtError, result;\n            name && await sql`savepoint ${sql(name)}`;\n            try {\n                result = await new Promise((resolve, reject)=>{\n                    const x = fn(sql);\n                    Promise.resolve(Array.isArray(x) ? Promise.all(x) : x).then(resolve, reject);\n                });\n                if (uncaughtError) throw uncaughtError;\n            } catch (e) {\n                await (name ? sql`rollback to ${sql(name)}` : sql`rollback`);\n                throw e instanceof _errors_js__WEBPACK_IMPORTED_MODULE_6__.PostgresError && e.code === "25P02" && uncaughtError || e;\n            }\n            if (!name) {\n                prepare ? await sql`prepare transaction \'${sql.unsafe(prepare)}\'` : await sql`commit`;\n            }\n            return result;\n            function savepoint(name, fn) {\n                if (name && Array.isArray(name.raw)) return savepoint((sql)=>sql.apply(sql, arguments));\n                arguments.length === 1 && (fn = name, name = null);\n                return scope(c, fn, "s" + savepoints++ + (name ? "_" + name : ""));\n            }\n            function handler(q) {\n                q.catch((e)=>uncaughtError || (uncaughtError = e));\n                c.queue === full ? queries.push(q) : c.execute(q) || move(c, full);\n            }\n        }\n        function onexecute(c) {\n            connection = c;\n            move(c, reserved);\n            c.reserved = ()=>queries.length ? c.execute(queries.shift()) : move(c, reserved);\n        }\n    }\n    function move(c, queue) {\n        c.queue.remove(c);\n        queue.push(c);\n        c.queue = queue;\n        queue === open ? c.idleTimer.start() : c.idleTimer.cancel();\n        return c;\n    }\n    function json(x) {\n        return new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(x, 3802);\n    }\n    function array(x, type) {\n        if (!Array.isArray(x)) return array(Array.from(arguments));\n        return new _types_js__WEBPACK_IMPORTED_MODULE_2__.Parameter(x, type || (x.length ? (0,_types_js__WEBPACK_IMPORTED_MODULE_2__.inferType)(x) || 25 : 0), options.shared.typeArrayMap);\n    }\n    function handler(query) {\n        if (ending) return query.reject(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection("CONNECTION_ENDED", options, options));\n        if (open.length) return go(open.shift(), query);\n        if (closed.length) return connect(closed.shift(), query);\n        busy.length ? go(busy.shift(), query) : queries.push(query);\n    }\n    function go(c, query) {\n        return c.execute(query) ? move(c, busy) : move(c, full);\n    }\n    function cancel(query) {\n        return new Promise((resolve, reject)=>{\n            query.state ? query.active ? (0,_connection_js__WEBPACK_IMPORTED_MODULE_3__["default"])(options).cancel(query.state, resolve, reject) : query.cancelled = {\n                resolve,\n                reject\n            } : (queries.remove(query), query.cancelled = true, query.reject(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.generic("57014", "canceling statement due to user request")), resolve());\n        });\n    }\n    async function end({ timeout = null } = {}) {\n        if (ending) return ending;\n        await 1;\n        let timer;\n        return ending = Promise.race([\n            new Promise((r)=>timeout !== null && (timer = setTimeout(destroy, timeout * 1000, r))),\n            Promise.all(connections.map((c)=>c.end()).concat(listen.sql ? listen.sql.end({\n                timeout: 0\n            }) : [], subscribe.sql ? subscribe.sql.end({\n                timeout: 0\n            }) : []))\n        ]).then(()=>clearTimeout(timer));\n    }\n    async function close() {\n        await Promise.all(connections.map((c)=>c.end()));\n    }\n    async function destroy(resolve) {\n        await Promise.all(connections.map((c)=>c.terminate()));\n        while(queries.length)queries.shift().reject(_errors_js__WEBPACK_IMPORTED_MODULE_6__.Errors.connection("CONNECTION_DESTROYED", options));\n        resolve();\n    }\n    function connect(c, query) {\n        move(c, connecting);\n        c.connect(query);\n        return c;\n    }\n    function onend(c) {\n        move(c, ended);\n    }\n    function onopen(c) {\n        if (queries.length === 0) return move(c, open);\n        let max = Math.ceil(queries.length / (connecting.length + 1)), ready = true;\n        while(ready && queries.length && max-- > 0){\n            const query = queries.shift();\n            if (query.reserve) return query.reserve(c);\n            ready = c.execute(query);\n        }\n        ready ? move(c, busy) : move(c, full);\n    }\n    function onclose(c, e) {\n        move(c, closed);\n        c.reserved = null;\n        c.onclose && (c.onclose(e), c.onclose = null);\n        options.onclose && options.onclose(c.id);\n        queries.length && connect(c, queries.shift());\n    }\n}\nfunction parseOptions(a, b) {\n    if (a && a.shared) return a;\n    const env = process.env // eslint-disable-line\n    , o = (!a || typeof a === "string" ? b : a) || {}, { url, multihost } = parseUrl(a), query = [\n        ...url.searchParams\n    ].reduce((a, [b, c])=>(a[b] = c, a), {}), host = o.hostname || o.host || multihost || url.hostname || env.PGHOST || "localhost", port = o.port || url.port || env.PGPORT || 5432, user = o.user || o.username || url.username || env.PGUSERNAME || env.PGUSER || osUsername();\n    o.no_prepare && (o.prepare = false);\n    query.sslmode && (query.ssl = query.sslmode, delete query.sslmode);\n    "timeout" in o && (console.log("The timeout option is deprecated, use idle_timeout instead"), o.idle_timeout = o.timeout // eslint-disable-line\n    );\n    query.sslrootcert === "system" && (query.ssl = "verify-full");\n    const ints = [\n        "idle_timeout",\n        "connect_timeout",\n        "max_lifetime",\n        "max_pipeline",\n        "backoff",\n        "keep_alive"\n    ];\n    const defaults = {\n        max: 10,\n        ssl: false,\n        idle_timeout: null,\n        connect_timeout: 30,\n        max_lifetime: max_lifetime,\n        max_pipeline: 100,\n        backoff: backoff,\n        keep_alive: 60,\n        prepare: true,\n        debug: false,\n        fetch_types: true,\n        publications: "alltables",\n        target_session_attrs: null\n    };\n    return {\n        host: Array.isArray(host) ? host : host.split(",").map((x)=>x.split(":")[0]),\n        port: Array.isArray(port) ? port : host.split(",").map((x)=>parseInt(x.split(":")[1] || port)),\n        path: o.path || host.indexOf("/") > -1 && host + "/.s.PGSQL." + port,\n        database: o.database || o.db || (url.pathname || "").slice(1) || env.PGDATABASE || user,\n        user: user,\n        pass: o.pass || o.password || url.password || env.PGPASSWORD || "",\n        ...Object.entries(defaults).reduce((acc, [k, d])=>{\n            const value = k in o ? o[k] : k in query ? query[k] === "disable" || query[k] === "false" ? false : query[k] : env["PG" + k.toUpperCase()] || d;\n            acc[k] = typeof value === "string" && ints.includes(k) ? +value : value;\n            return acc;\n        }, {}),\n        connection: {\n            application_name: "postgres.js",\n            ...o.connection,\n            ...Object.entries(query).reduce((acc, [k, v])=>(k in defaults || (acc[k] = v), acc), {})\n        },\n        types: o.types || {},\n        target_session_attrs: tsa(o, url, env),\n        onnotice: o.onnotice,\n        onnotify: o.onnotify,\n        onclose: o.onclose,\n        onparameter: o.onparameter,\n        socket: o.socket,\n        transform: parseTransform(o.transform || {\n            undefined: undefined\n        }),\n        parameters: {},\n        shared: {\n            retries: 0,\n            typeArrayMap: {}\n        },\n        ...(0,_types_js__WEBPACK_IMPORTED_MODULE_2__.mergeUserTypes)(o.types)\n    };\n}\nfunction tsa(o, url, env) {\n    const x = o.target_session_attrs || url.searchParams.get("target_session_attrs") || env.PGTARGETSESSIONATTRS;\n    if (!x || [\n        "read-write",\n        "read-only",\n        "primary",\n        "standby",\n        "prefer-standby"\n    ].includes(x)) return x;\n    throw new Error("target_session_attrs " + x + " is not supported");\n}\nfunction backoff(retries) {\n    return (0.5 + Math.random() / 2) * Math.min(3 ** retries / 100, 20);\n}\nfunction max_lifetime() {\n    return 60 * (30 + Math.random() * 30);\n}\nfunction parseTransform(x) {\n    return {\n        undefined: x.undefined,\n        column: {\n            from: typeof x.column === "function" ? x.column : x.column && x.column.from,\n            to: x.column && x.column.to\n        },\n        value: {\n            from: typeof x.value === "function" ? x.value : x.value && x.value.from,\n            to: x.value && x.value.to\n        },\n        row: {\n            from: typeof x.row === "function" ? x.row : x.row && x.row.from,\n            to: x.row && x.row.to\n        }\n    };\n}\nfunction parseUrl(url) {\n    if (!url || typeof url !== "string") return {\n        url: {\n            searchParams: new Map()\n        }\n    };\n    let host = url;\n    host = host.slice(host.indexOf("://") + 3).split(/[?/]/)[0];\n    host = decodeURIComponent(host.slice(host.indexOf("@") + 1));\n    const urlObj = new URL(url.replace(host, host.split(",")[0]));\n    return {\n        url: {\n            username: decodeURIComponent(urlObj.username),\n            password: decodeURIComponent(urlObj.password),\n            host: urlObj.host,\n            hostname: urlObj.hostname,\n            port: urlObj.port,\n            pathname: urlObj.pathname,\n            searchParams: urlObj.searchParams\n        },\n        multihost: host.indexOf(",") > -1 && host\n    };\n}\nfunction osUsername() {\n    try {\n        return os__WEBPACK_IMPORTED_MODULE_0__.userInfo().username // eslint-disable-line\n        ;\n    } catch (_) {\n        return process.env.USERNAME || process.env.USER || process.env.LOGNAME // eslint-disable-line\n        ;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/index.js\n',
      );

      /***/
    },

  /***/ '(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/large.js':
    /*!**********************************************************************************!*\
  !*** ../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/large.js ***!
  \**********************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ largeObject)\n/* harmony export */ });\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream */ "stream");\n\nfunction largeObject(sql, oid, mode = 0x00020000 | 0x00040000) {\n    return new Promise(async (resolve, reject)=>{\n        await sql.begin(async (sql)=>{\n            let finish;\n            !oid && ([{ oid }] = await sql`select lo_creat(-1) as oid`);\n            const [{ fd }] = await sql`select lo_open(${oid}, ${mode}) as fd`;\n            const lo = {\n                writable,\n                readable,\n                close: ()=>sql`select lo_close(${fd})`.then(finish),\n                tell: ()=>sql`select lo_tell64(${fd})`,\n                read: (x)=>sql`select loread(${fd}, ${x}) as data`,\n                write: (x)=>sql`select lowrite(${fd}, ${x})`,\n                truncate: (x)=>sql`select lo_truncate64(${fd}, ${x})`,\n                seek: (x, whence = 0)=>sql`select lo_lseek64(${fd}, ${x}, ${whence})`,\n                size: ()=>sql`\n          select\n            lo_lseek64(${fd}, location, 0) as position,\n            seek.size\n          from (\n            select\n              lo_lseek64($1, 0, 2) as size,\n              tell.location\n            from (select lo_tell64($1) as location) tell\n          ) seek\n        `\n            };\n            resolve(lo);\n            return new Promise(async (r)=>finish = r);\n            async function readable({ highWaterMark = 2048 * 8, start = 0, end = Infinity } = {}) {\n                let max = end - start;\n                start && await lo.seek(start);\n                return new stream__WEBPACK_IMPORTED_MODULE_0__.Readable({\n                    highWaterMark,\n                    async read (size) {\n                        const l = size > max ? size - max : size;\n                        max -= size;\n                        const [{ data }] = await lo.read(l);\n                        this.push(data);\n                        if (data.length < size) this.push(null);\n                    }\n                });\n            }\n            async function writable({ highWaterMark = 2048 * 8, start = 0 } = {}) {\n                start && await lo.seek(start);\n                return new stream__WEBPACK_IMPORTED_MODULE_0__.Writable({\n                    highWaterMark,\n                    write (chunk, encoding, callback) {\n                        lo.write(chunk).then(()=>callback(), callback);\n                    }\n                });\n            }\n        }).catch(reject);\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Bvc3RncmVzQDMuNC4zL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvbGFyZ2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBMkI7QUFFWixTQUFTQyxZQUFZQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsT0FBTyxhQUFhLFVBQVU7SUFDMUUsT0FBTyxJQUFJQyxRQUFRLE9BQU1DLFNBQVNDO1FBQ2hDLE1BQU1MLElBQUlNLEtBQUssQ0FBQyxPQUFNTjtZQUNwQixJQUFJTztZQUNKLENBQUNOLE9BQVEsRUFBQyxFQUFFQSxHQUFHLEVBQUUsQ0FBQyxHQUFHLE1BQU1ELEdBQUcsQ0FBQywwQkFBMEIsQ0FBQztZQUMxRCxNQUFNLENBQUMsRUFBRVEsRUFBRSxFQUFFLENBQUMsR0FBRyxNQUFNUixHQUFHLENBQUMsZUFBZSxFQUFHQyxJQUFLLEVBQUUsRUFBR0MsS0FBTSxPQUFPLENBQUM7WUFFckUsTUFBTU8sS0FBSztnQkFDVEM7Z0JBQ0FDO2dCQUNBQyxPQUFZLElBQU1aLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBR1EsR0FBSSxDQUFDLENBQUMsQ0FBQ0ssSUFBSSxDQUFDTjtnQkFDckRPLE1BQVksSUFBTWQsR0FBRyxDQUFDLGlCQUFpQixFQUFHUSxHQUFJLENBQUMsQ0FBQztnQkFDaERPLE1BQVksQ0FBQ0MsSUFBTWhCLEdBQUcsQ0FBQyxjQUFjLEVBQUdRLEdBQUksRUFBRSxFQUFHUSxFQUFHLFNBQVMsQ0FBQztnQkFDOURDLE9BQVksQ0FBQ0QsSUFBTWhCLEdBQUcsQ0FBQyxlQUFlLEVBQUdRLEdBQUksRUFBRSxFQUFHUSxFQUFHLENBQUMsQ0FBQztnQkFDdkRFLFVBQVksQ0FBQ0YsSUFBTWhCLEdBQUcsQ0FBQyxxQkFBcUIsRUFBR1EsR0FBSSxFQUFFLEVBQUdRLEVBQUcsQ0FBQyxDQUFDO2dCQUM3REcsTUFBWSxDQUFDSCxHQUFHSSxTQUFTLENBQUMsR0FBS3BCLEdBQUcsQ0FBQyxrQkFBa0IsRUFBR1EsR0FBSSxFQUFFLEVBQUdRLEVBQUcsRUFBRSxFQUFHSSxPQUFRLENBQUMsQ0FBQztnQkFDbkZDLE1BQVksSUFBTXJCLEdBQUcsQ0FBQzs7dUJBRVAsRUFBR1EsR0FBSTs7Ozs7Ozs7UUFRdEIsQ0FBQztZQUNIO1lBRUFKLFFBQVFLO1lBRVIsT0FBTyxJQUFJTixRQUFRLE9BQU1tQixJQUFLZixTQUFTZTtZQUV2QyxlQUFlWCxTQUFTLEVBQ3RCWSxnQkFBZ0IsT0FBTyxDQUFDLEVBQ3hCQyxRQUFRLENBQUMsRUFDVEMsTUFBTUMsUUFBUSxFQUNmLEdBQUcsQ0FBQyxDQUFDO2dCQUNKLElBQUlDLE1BQU1GLE1BQU1EO2dCQUNoQkEsU0FBUyxNQUFNZixHQUFHVSxJQUFJLENBQUNLO2dCQUN2QixPQUFPLElBQUkxQiw0Q0FBZSxDQUFDO29CQUN6QnlCO29CQUNBLE1BQU1SLE1BQUtNLElBQUk7d0JBQ2IsTUFBTVEsSUFBSVIsT0FBT00sTUFBTU4sT0FBT00sTUFBTU47d0JBQ3BDTSxPQUFPTjt3QkFDUCxNQUFNLENBQUMsRUFBRVMsSUFBSSxFQUFFLENBQUMsR0FBRyxNQUFNckIsR0FBR00sSUFBSSxDQUFDYzt3QkFDakMsSUFBSSxDQUFDRSxJQUFJLENBQUNEO3dCQUNWLElBQUlBLEtBQUtFLE1BQU0sR0FBR1gsTUFDaEIsSUFBSSxDQUFDVSxJQUFJLENBQUM7b0JBQ2Q7Z0JBQ0Y7WUFDRjtZQUVBLGVBQWVyQixTQUFTLEVBQ3RCYSxnQkFBZ0IsT0FBTyxDQUFDLEVBQ3hCQyxRQUFRLENBQUMsRUFDVixHQUFHLENBQUMsQ0FBQztnQkFDSkEsU0FBUyxNQUFNZixHQUFHVSxJQUFJLENBQUNLO2dCQUN2QixPQUFPLElBQUkxQiw0Q0FBZSxDQUFDO29CQUN6QnlCO29CQUNBTixPQUFNaUIsS0FBSyxFQUFFQyxRQUFRLEVBQUVDLFFBQVE7d0JBQzdCM0IsR0FBR1EsS0FBSyxDQUFDaUIsT0FBT3JCLElBQUksQ0FBQyxJQUFNdUIsWUFBWUE7b0JBQ3pDO2dCQUNGO1lBQ0Y7UUFDRixHQUFHQyxLQUFLLENBQUNoQztJQUNYO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWNtZS9uZXh0anMvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Bvc3RncmVzQDMuNC4zL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvbGFyZ2UuanM/NTZmYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3RyZWFtIGZyb20gJ3N0cmVhbSdcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGFyZ2VPYmplY3Qoc3FsLCBvaWQsIG1vZGUgPSAweDAwMDIwMDAwIHwgMHgwMDA0MDAwMCkge1xuICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgYXdhaXQgc3FsLmJlZ2luKGFzeW5jIHNxbCA9PiB7XG4gICAgICBsZXQgZmluaXNoXG4gICAgICAhb2lkICYmIChbeyBvaWQgfV0gPSBhd2FpdCBzcWxgc2VsZWN0IGxvX2NyZWF0KC0xKSBhcyBvaWRgKVxuICAgICAgY29uc3QgW3sgZmQgfV0gPSBhd2FpdCBzcWxgc2VsZWN0IGxvX29wZW4oJHsgb2lkIH0sICR7IG1vZGUgfSkgYXMgZmRgXG5cbiAgICAgIGNvbnN0IGxvID0ge1xuICAgICAgICB3cml0YWJsZSxcbiAgICAgICAgcmVhZGFibGUsXG4gICAgICAgIGNsb3NlICAgICA6ICgpID0+IHNxbGBzZWxlY3QgbG9fY2xvc2UoJHsgZmQgfSlgLnRoZW4oZmluaXNoKSxcbiAgICAgICAgdGVsbCAgICAgIDogKCkgPT4gc3FsYHNlbGVjdCBsb190ZWxsNjQoJHsgZmQgfSlgLFxuICAgICAgICByZWFkICAgICAgOiAoeCkgPT4gc3FsYHNlbGVjdCBsb3JlYWQoJHsgZmQgfSwgJHsgeCB9KSBhcyBkYXRhYCxcbiAgICAgICAgd3JpdGUgICAgIDogKHgpID0+IHNxbGBzZWxlY3QgbG93cml0ZSgkeyBmZCB9LCAkeyB4IH0pYCxcbiAgICAgICAgdHJ1bmNhdGUgIDogKHgpID0+IHNxbGBzZWxlY3QgbG9fdHJ1bmNhdGU2NCgkeyBmZCB9LCAkeyB4IH0pYCxcbiAgICAgICAgc2VlayAgICAgIDogKHgsIHdoZW5jZSA9IDApID0+IHNxbGBzZWxlY3QgbG9fbHNlZWs2NCgkeyBmZCB9LCAkeyB4IH0sICR7IHdoZW5jZSB9KWAsXG4gICAgICAgIHNpemUgICAgICA6ICgpID0+IHNxbGBcbiAgICAgICAgICBzZWxlY3RcbiAgICAgICAgICAgIGxvX2xzZWVrNjQoJHsgZmQgfSwgbG9jYXRpb24sIDApIGFzIHBvc2l0aW9uLFxuICAgICAgICAgICAgc2Vlay5zaXplXG4gICAgICAgICAgZnJvbSAoXG4gICAgICAgICAgICBzZWxlY3RcbiAgICAgICAgICAgICAgbG9fbHNlZWs2NCgkMSwgMCwgMikgYXMgc2l6ZSxcbiAgICAgICAgICAgICAgdGVsbC5sb2NhdGlvblxuICAgICAgICAgICAgZnJvbSAoc2VsZWN0IGxvX3RlbGw2NCgkMSkgYXMgbG9jYXRpb24pIHRlbGxcbiAgICAgICAgICApIHNlZWtcbiAgICAgICAgYFxuICAgICAgfVxuXG4gICAgICByZXNvbHZlKGxvKVxuXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoYXN5bmMgciA9PiBmaW5pc2ggPSByKVxuXG4gICAgICBhc3luYyBmdW5jdGlvbiByZWFkYWJsZSh7XG4gICAgICAgIGhpZ2hXYXRlck1hcmsgPSAyMDQ4ICogOCxcbiAgICAgICAgc3RhcnQgPSAwLFxuICAgICAgICBlbmQgPSBJbmZpbml0eVxuICAgICAgfSA9IHt9KSB7XG4gICAgICAgIGxldCBtYXggPSBlbmQgLSBzdGFydFxuICAgICAgICBzdGFydCAmJiBhd2FpdCBsby5zZWVrKHN0YXJ0KVxuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbS5SZWFkYWJsZSh7XG4gICAgICAgICAgaGlnaFdhdGVyTWFyayxcbiAgICAgICAgICBhc3luYyByZWFkKHNpemUpIHtcbiAgICAgICAgICAgIGNvbnN0IGwgPSBzaXplID4gbWF4ID8gc2l6ZSAtIG1heCA6IHNpemVcbiAgICAgICAgICAgIG1heCAtPSBzaXplXG4gICAgICAgICAgICBjb25zdCBbeyBkYXRhIH1dID0gYXdhaXQgbG8ucmVhZChsKVxuICAgICAgICAgICAgdGhpcy5wdXNoKGRhdGEpXG4gICAgICAgICAgICBpZiAoZGF0YS5sZW5ndGggPCBzaXplKVxuICAgICAgICAgICAgICB0aGlzLnB1c2gobnVsbClcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIGFzeW5jIGZ1bmN0aW9uIHdyaXRhYmxlKHtcbiAgICAgICAgaGlnaFdhdGVyTWFyayA9IDIwNDggKiA4LFxuICAgICAgICBzdGFydCA9IDBcbiAgICAgIH0gPSB7fSkge1xuICAgICAgICBzdGFydCAmJiBhd2FpdCBsby5zZWVrKHN0YXJ0KVxuICAgICAgICByZXR1cm4gbmV3IFN0cmVhbS5Xcml0YWJsZSh7XG4gICAgICAgICAgaGlnaFdhdGVyTWFyayxcbiAgICAgICAgICB3cml0ZShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICBsby53cml0ZShjaHVuaykudGhlbigoKSA9PiBjYWxsYmFjaygpLCBjYWxsYmFjaylcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSkuY2F0Y2gocmVqZWN0KVxuICB9KVxufVxuIl0sIm5hbWVzIjpbIlN0cmVhbSIsImxhcmdlT2JqZWN0Iiwic3FsIiwib2lkIiwibW9kZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiYmVnaW4iLCJmaW5pc2giLCJmZCIsImxvIiwid3JpdGFibGUiLCJyZWFkYWJsZSIsImNsb3NlIiwidGhlbiIsInRlbGwiLCJyZWFkIiwieCIsIndyaXRlIiwidHJ1bmNhdGUiLCJzZWVrIiwid2hlbmNlIiwic2l6ZSIsInIiLCJoaWdoV2F0ZXJNYXJrIiwic3RhcnQiLCJlbmQiLCJJbmZpbml0eSIsIm1heCIsIlJlYWRhYmxlIiwibCIsImRhdGEiLCJwdXNoIiwibGVuZ3RoIiwiV3JpdGFibGUiLCJjaHVuayIsImVuY29kaW5nIiwiY2FsbGJhY2siLCJjYXRjaCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/large.js\n',
      );

      /***/
    },

  /***/ '(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/query.js':
    /*!**********************************************************************************!*\
  !*** ../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/query.js ***!
  \**********************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CLOSE: () => (/* binding */ CLOSE),\n/* harmony export */   Query: () => (/* binding */ Query)\n/* harmony export */ });\nconst originCache = new Map(), originStackCache = new Map(), originError = Symbol("OriginError");\nconst CLOSE = {};\nclass Query extends Promise {\n    constructor(strings, args, handler, canceller, options = {}){\n        let resolve, reject;\n        super((a, b)=>{\n            resolve = a;\n            reject = b;\n        });\n        this.tagged = Array.isArray(strings.raw);\n        this.strings = strings;\n        this.args = args;\n        this.handler = handler;\n        this.canceller = canceller;\n        this.options = options;\n        this.state = null;\n        this.statement = null;\n        this.resolve = (x)=>(this.active = false, resolve(x));\n        this.reject = (x)=>(this.active = false, reject(x));\n        this.active = false;\n        this.cancelled = null;\n        this.executed = false;\n        this.signature = "";\n        this[originError] = this.handler.debug ? new Error() : this.tagged && cachedError(this.strings);\n    }\n    get origin() {\n        return (this.handler.debug ? this[originError].stack : this.tagged && originStackCache.has(this.strings) ? originStackCache.get(this.strings) : originStackCache.set(this.strings, this[originError].stack).get(this.strings)) || "";\n    }\n    static get [Symbol.species]() {\n        return Promise;\n    }\n    cancel() {\n        return this.canceller && (this.canceller(this), this.canceller = null);\n    }\n    simple() {\n        this.options.simple = true;\n        this.options.prepare = false;\n        return this;\n    }\n    async readable() {\n        this.simple();\n        this.streaming = true;\n        return this;\n    }\n    async writable() {\n        this.simple();\n        this.streaming = true;\n        return this;\n    }\n    cursor(rows = 1, fn) {\n        this.options.simple = false;\n        if (typeof rows === "function") {\n            fn = rows;\n            rows = 1;\n        }\n        this.cursorRows = rows;\n        if (typeof fn === "function") return this.cursorFn = fn, this;\n        let prev;\n        return {\n            [Symbol.asyncIterator]: ()=>({\n                    next: ()=>{\n                        if (this.executed && !this.active) return {\n                            done: true\n                        };\n                        prev && prev();\n                        const promise = new Promise((resolve, reject)=>{\n                            this.cursorFn = (value)=>{\n                                resolve({\n                                    value,\n                                    done: false\n                                });\n                                return new Promise((r)=>prev = r);\n                            };\n                            this.resolve = ()=>(this.active = false, resolve({\n                                    done: true\n                                }));\n                            this.reject = (x)=>(this.active = false, reject(x));\n                        });\n                        this.execute();\n                        return promise;\n                    },\n                    return () {\n                        prev && prev(CLOSE);\n                        return {\n                            done: true\n                        };\n                    }\n                })\n        };\n    }\n    describe() {\n        this.options.simple = false;\n        this.onlyDescribe = this.options.prepare = true;\n        return this;\n    }\n    stream() {\n        throw new Error(".stream has been renamed to .forEach");\n    }\n    forEach(fn) {\n        this.forEachFn = fn;\n        this.handle();\n        return this;\n    }\n    raw() {\n        this.isRaw = true;\n        return this;\n    }\n    values() {\n        this.isRaw = "values";\n        return this;\n    }\n    async handle() {\n        !this.executed && (this.executed = true) && await 1 && this.handler(this);\n    }\n    execute() {\n        this.handle();\n        return this;\n    }\n    then() {\n        this.handle();\n        return super.then.apply(this, arguments);\n    }\n    catch() {\n        this.handle();\n        return super.catch.apply(this, arguments);\n    }\n    finally() {\n        this.handle();\n        return super.finally.apply(this, arguments);\n    }\n}\nfunction cachedError(xs) {\n    if (originCache.has(xs)) return originCache.get(xs);\n    const x = Error.stackTraceLimit;\n    Error.stackTraceLimit = 4;\n    originCache.set(xs, new Error());\n    Error.stackTraceLimit = x;\n    return originCache.get(xs);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/query.js\n',
      );

      /***/
    },

  /***/ '(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/queue.js':
    /*!**********************************************************************************!*\
  !*** ../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/queue.js ***!
  \**********************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Queue);\nfunction Queue(initial = []) {\n    let xs = initial.slice();\n    let index = 0;\n    return {\n        get length () {\n            return xs.length - index;\n        },\n        remove: (x)=>{\n            const index = xs.indexOf(x);\n            return index === -1 ? null : (xs.splice(index, 1), x);\n        },\n        push: (x)=>(xs.push(x), x),\n        shift: ()=>{\n            const out = xs[index++];\n            if (index === xs.length) {\n                index = 0;\n                xs = [];\n            } else {\n                xs[index - 1] = undefined;\n            }\n            return out;\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Bvc3RncmVzQDMuNC4zL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvcXVldWUuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlQSxLQUFLQSxFQUFBO0FBRXBCLFNBQVNBLE1BQU1DLFVBQVUsRUFBRTtJQUN6QixJQUFJQyxLQUFLRCxRQUFRRSxLQUFLO0lBQ3RCLElBQUlDLFFBQVE7SUFFWixPQUFPO1FBQ0wsSUFBSUMsVUFBUztZQUNYLE9BQU9ILEdBQUdHLE1BQU0sR0FBR0Q7UUFDckI7UUFDQUUsUUFBUSxDQUFDQztZQUNQLE1BQU1ILFFBQVFGLEdBQUdNLE9BQU8sQ0FBQ0Q7WUFDekIsT0FBT0gsVUFBVSxDQUFDLElBQ2QsT0FDQ0YsQ0FBQUEsR0FBR08sTUFBTSxDQUFDTCxPQUFPLElBQUlHLENBQUFBO1FBQzVCO1FBQ0FHLE1BQU0sQ0FBQ0gsSUFBT0wsQ0FBQUEsR0FBR1EsSUFBSSxDQUFDSCxJQUFJQSxDQUFBQTtRQUMxQkksT0FBTztZQUNMLE1BQU1DLE1BQU1WLEVBQUUsQ0FBQ0UsUUFBUTtZQUV2QixJQUFJQSxVQUFVRixHQUFHRyxNQUFNLEVBQUU7Z0JBQ3ZCRCxRQUFRO2dCQUNSRixLQUFLLEVBQUU7WUFDVCxPQUFPO2dCQUNMQSxFQUFFLENBQUNFLFFBQVEsRUFBRSxHQUFHUztZQUNsQjtZQUVBLE9BQU9EO1FBQ1Q7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGFjbWUvbmV4dGpzLy4uLy4uL25vZGVfbW9kdWxlcy8ucG5wbS9wb3N0Z3Jlc0AzLjQuMy9ub2RlX21vZHVsZXMvcG9zdGdyZXMvc3JjL3F1ZXVlLmpzPzVjZDEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgUXVldWVcblxuZnVuY3Rpb24gUXVldWUoaW5pdGlhbCA9IFtdKSB7XG4gIGxldCB4cyA9IGluaXRpYWwuc2xpY2UoKVxuICBsZXQgaW5kZXggPSAwXG5cbiAgcmV0dXJuIHtcbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgcmV0dXJuIHhzLmxlbmd0aCAtIGluZGV4XG4gICAgfSxcbiAgICByZW1vdmU6ICh4KSA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IHhzLmluZGV4T2YoeClcbiAgICAgIHJldHVybiBpbmRleCA9PT0gLTFcbiAgICAgICAgPyBudWxsXG4gICAgICAgIDogKHhzLnNwbGljZShpbmRleCwgMSksIHgpXG4gICAgfSxcbiAgICBwdXNoOiAoeCkgPT4gKHhzLnB1c2goeCksIHgpLFxuICAgIHNoaWZ0OiAoKSA9PiB7XG4gICAgICBjb25zdCBvdXQgPSB4c1tpbmRleCsrXVxuXG4gICAgICBpZiAoaW5kZXggPT09IHhzLmxlbmd0aCkge1xuICAgICAgICBpbmRleCA9IDBcbiAgICAgICAgeHMgPSBbXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgeHNbaW5kZXggLSAxXSA9IHVuZGVmaW5lZFxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3V0XG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsiUXVldWUiLCJpbml0aWFsIiwieHMiLCJzbGljZSIsImluZGV4IiwibGVuZ3RoIiwicmVtb3ZlIiwieCIsImluZGV4T2YiLCJzcGxpY2UiLCJwdXNoIiwic2hpZnQiLCJvdXQiLCJ1bmRlZmluZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/queue.js\n',
      );

      /***/
    },

  /***/ '(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/result.js':
    /*!***********************************************************************************!*\
  !*** ../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/result.js ***!
  \***********************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Result)\n/* harmony export */ });\nclass Result extends Array {\n    constructor(){\n        super();\n        Object.defineProperties(this, {\n            count: {\n                value: null,\n                writable: true\n            },\n            state: {\n                value: null,\n                writable: true\n            },\n            command: {\n                value: null,\n                writable: true\n            },\n            columns: {\n                value: null,\n                writable: true\n            },\n            statement: {\n                value: null,\n                writable: true\n            }\n        });\n    }\n    static get [Symbol.species]() {\n        return Array;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Bvc3RncmVzQDMuNC4zL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvcmVzdWx0LmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBZSxNQUFNQSxlQUFlQztJQUNsQ0MsYUFBYztRQUNaLEtBQUs7UUFDTEMsT0FBT0MsZ0JBQWdCLENBQUMsSUFBSSxFQUFFO1lBQzVCQyxPQUFPO2dCQUFFQyxPQUFPO2dCQUFNQyxVQUFVO1lBQUs7WUFDckNDLE9BQU87Z0JBQUVGLE9BQU87Z0JBQU1DLFVBQVU7WUFBSztZQUNyQ0UsU0FBUztnQkFBRUgsT0FBTztnQkFBTUMsVUFBVTtZQUFLO1lBQ3ZDRyxTQUFTO2dCQUFFSixPQUFPO2dCQUFNQyxVQUFVO1lBQUs7WUFDdkNJLFdBQVc7Z0JBQUVMLE9BQU87Z0JBQU1DLFVBQVU7WUFBSztRQUMzQztJQUNGO0lBRUEsV0FBVyxDQUFDSyxPQUFPQyxPQUFPLENBQUMsR0FBRztRQUM1QixPQUFPWjtJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AYWNtZS9uZXh0anMvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Bvc3RncmVzQDMuNC4zL25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy9zcmMvcmVzdWx0LmpzP2E0YmYiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVzdWx0IGV4dGVuZHMgQXJyYXkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGhpcywge1xuICAgICAgY291bnQ6IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICBzdGF0ZTogeyB2YWx1ZTogbnVsbCwgd3JpdGFibGU6IHRydWUgfSxcbiAgICAgIGNvbW1hbmQ6IHsgdmFsdWU6IG51bGwsIHdyaXRhYmxlOiB0cnVlIH0sXG4gICAgICBjb2x1bW5zOiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9LFxuICAgICAgc3RhdGVtZW50OiB7IHZhbHVlOiBudWxsLCB3cml0YWJsZTogdHJ1ZSB9XG4gICAgfSlcbiAgfVxuXG4gIHN0YXRpYyBnZXQgW1N5bWJvbC5zcGVjaWVzXSgpIHtcbiAgICByZXR1cm4gQXJyYXlcbiAgfVxufVxuIl0sIm5hbWVzIjpbIlJlc3VsdCIsIkFycmF5IiwiY29uc3RydWN0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY291bnQiLCJ2YWx1ZSIsIndyaXRhYmxlIiwic3RhdGUiLCJjb21tYW5kIiwiY29sdW1ucyIsInN0YXRlbWVudCIsIlN5bWJvbCIsInNwZWNpZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/result.js\n',
      );

      /***/
    },

  /***/ '(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/subscribe.js':
    /*!**************************************************************************************!*\
  !*** ../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/subscribe.js ***!
  \**************************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ Subscribe)\n/* harmony export */ });\nconst noop = ()=>{};\nfunction Subscribe(postgres, options) {\n    const subscribers = new Map(), slot = "postgresjs_" + Math.random().toString(36).slice(2), state = {};\n    let connection, stream, ended = false;\n    const sql = subscribe.sql = postgres({\n        ...options,\n        transform: {\n            column: {},\n            value: {},\n            row: {}\n        },\n        max: 1,\n        fetch_types: false,\n        idle_timeout: null,\n        max_lifetime: null,\n        connection: {\n            ...options.connection,\n            replication: "database"\n        },\n        onclose: async function() {\n            if (ended) return;\n            stream = null;\n            state.pid = state.secret = undefined;\n            connected(await init(sql, slot, options.publications));\n            subscribers.forEach((event)=>event.forEach(({ onsubscribe })=>onsubscribe()));\n        },\n        no_subscribe: true\n    });\n    const end = sql.end, close = sql.close;\n    sql.end = async ()=>{\n        ended = true;\n        stream && await new Promise((r)=>(stream.once("close", r), stream.end()));\n        return end();\n    };\n    sql.close = async ()=>{\n        stream && await new Promise((r)=>(stream.once("close", r), stream.end()));\n        return close();\n    };\n    return subscribe;\n    async function subscribe(event, fn, onsubscribe = noop) {\n        event = parseEvent(event);\n        if (!connection) connection = init(sql, slot, options.publications);\n        const subscriber = {\n            fn,\n            onsubscribe\n        };\n        const fns = subscribers.has(event) ? subscribers.get(event).add(subscriber) : subscribers.set(event, new Set([\n            subscriber\n        ])).get(event);\n        const unsubscribe = ()=>{\n            fns.delete(subscriber);\n            fns.size === 0 && subscribers.delete(event);\n        };\n        return connection.then((x)=>{\n            connected(x);\n            onsubscribe();\n            return {\n                unsubscribe,\n                state,\n                sql\n            };\n        });\n    }\n    function connected(x) {\n        stream = x.stream;\n        state.pid = x.state.pid;\n        state.secret = x.state.secret;\n    }\n    async function init(sql, slot, publications) {\n        if (!publications) throw new Error("Missing publication names");\n        const xs = await sql.unsafe(`CREATE_REPLICATION_SLOT ${slot} TEMPORARY LOGICAL pgoutput NOEXPORT_SNAPSHOT`);\n        const [x] = xs;\n        const stream = await sql.unsafe(`START_REPLICATION SLOT ${slot} LOGICAL ${x.consistent_point} (proto_version \'1\', publication_names \'${publications}\')`).writable();\n        const state = {\n            lsn: Buffer.concat(x.consistent_point.split("/").map((x)=>Buffer.from(("00000000" + x).slice(-8), "hex")))\n        };\n        stream.on("data", data);\n        stream.on("error", error);\n        stream.on("close", sql.close);\n        return {\n            stream,\n            state: xs.state\n        };\n        function error(e) {\n            console.error("Unexpected error during logical streaming - reconnecting", e);\n        }\n        function data(x) {\n            if (x[0] === 0x77) parse(x.subarray(25), state, sql.options.parsers, handle, options.transform);\n            else if (x[0] === 0x6b && x[17]) pong();\n        }\n        function handle(a, b) {\n            const path = b.relation.schema + "." + b.relation.table;\n            call("*", a, b);\n            call("*:" + path, a, b);\n            b.relation.keys.length && call("*:" + path + "=" + b.relation.keys.map((x)=>a[x.name]), a, b);\n            call(b.command, a, b);\n            call(b.command + ":" + path, a, b);\n            b.relation.keys.length && call(b.command + ":" + path + "=" + b.relation.keys.map((x)=>a[x.name]), a, b);\n        }\n        function pong() {\n            const x = Buffer.alloc(34);\n            x[0] = "r".charCodeAt(0);\n            x.fill(state.lsn, 1);\n            x.writeBigInt64BE(BigInt(Date.now() - Date.UTC(2000, 0, 1)) * BigInt(1000), 25);\n            stream.write(x);\n        }\n    }\n    function call(x, a, b) {\n        subscribers.has(x) && subscribers.get(x).forEach(({ fn })=>fn(a, b, x));\n    }\n}\nfunction Time(x) {\n    return new Date(Date.UTC(2000, 0, 1) + Number(x / BigInt(1000)));\n}\nfunction parse(x, state, parsers, handle, transform) {\n    const char = (acc, [k, v])=>(acc[k.charCodeAt(0)] = v, acc);\n    Object.entries({\n        R: (x)=>{\n            let i = 1;\n            const r = state[x.readUInt32BE(i)] = {\n                schema: x.toString("utf8", i += 4, i = x.indexOf(0, i)) || "pg_catalog",\n                table: x.toString("utf8", i + 1, i = x.indexOf(0, i + 1)),\n                columns: Array(x.readUInt16BE(i += 2)),\n                keys: []\n            };\n            i += 2;\n            let columnIndex = 0, column;\n            while(i < x.length){\n                column = r.columns[columnIndex++] = {\n                    key: x[i++],\n                    name: transform.column.from ? transform.column.from(x.toString("utf8", i, i = x.indexOf(0, i))) : x.toString("utf8", i, i = x.indexOf(0, i)),\n                    type: x.readUInt32BE(i += 1),\n                    parser: parsers[x.readUInt32BE(i)],\n                    atttypmod: x.readUInt32BE(i += 4)\n                };\n                column.key && r.keys.push(column);\n                i += 4;\n            }\n        },\n        Y: ()=>{},\n        O: ()=>{},\n        B: (x)=>{\n            state.date = Time(x.readBigInt64BE(9));\n            state.lsn = x.subarray(1, 9);\n        },\n        I: (x)=>{\n            let i = 1;\n            const relation = state[x.readUInt32BE(i)];\n            const { row } = tuples(x, relation.columns, i += 7, transform);\n            handle(row, {\n                command: "insert",\n                relation\n            });\n        },\n        D: (x)=>{\n            let i = 1;\n            const relation = state[x.readUInt32BE(i)];\n            i += 4;\n            const key = x[i] === 75;\n            handle(key || x[i] === 79 ? tuples(x, relation.columns, i += 3, transform).row : null, {\n                command: "delete",\n                relation,\n                key\n            });\n        },\n        U: (x)=>{\n            let i = 1;\n            const relation = state[x.readUInt32BE(i)];\n            i += 4;\n            const key = x[i] === 75;\n            const xs = key || x[i] === 79 ? tuples(x, relation.columns, i += 3, transform) : null;\n            xs && (i = xs.i);\n            const { row } = tuples(x, relation.columns, i + 3, transform);\n            handle(row, {\n                command: "update",\n                relation,\n                key,\n                old: xs && xs.row\n            });\n        },\n        T: ()=>{},\n        C: ()=>{} // Commit\n    }).reduce(char, {})[x[0]](x);\n}\nfunction tuples(x, columns, xi, transform) {\n    let type, column, value;\n    const row = transform.raw ? new Array(columns.length) : {};\n    for(let i = 0; i < columns.length; i++){\n        type = x[xi++];\n        column = columns[i];\n        value = type === 110 // n\n         ? null : type === 117 // u\n         ? undefined : column.parser === undefined ? x.toString("utf8", xi + 4, xi += 4 + x.readUInt32BE(xi)) : column.parser.array === true ? column.parser(x.toString("utf8", xi + 5, xi += 4 + x.readUInt32BE(xi))) : column.parser(x.toString("utf8", xi + 4, xi += 4 + x.readUInt32BE(xi)));\n        transform.raw ? row[i] = transform.raw === true ? value : transform.value.from ? transform.value.from(value, column) : value : row[column.name] = transform.value.from ? transform.value.from(value, column) : value;\n    }\n    return {\n        i: xi,\n        row: transform.row.from ? transform.row.from(row) : row\n    };\n}\nfunction parseEvent(x) {\n    const xs = x.match(/^(\\*|insert|update|delete)?:?([^.]+?\\.?[^=]+)?=?(.+)?/i) || [];\n    if (!xs) throw new Error("Malformed subscribe pattern: " + x);\n    const [, command, path, key] = xs;\n    return (command || "*") + (path ? ":" + (path.indexOf(".") === -1 ? "public." + path : path) : "") + (key ? "=" + key : "");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/subscribe.js\n',
      );

      /***/
    },

  /***/ '(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/types.js':
    /*!**********************************************************************************!*\
  !*** ../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/types.js ***!
  \**********************************************************************************/
    /***/ (
      __unused_webpack___webpack_module__,
      __webpack_exports__,
      __webpack_require__,
    ) => {
      eval(
        '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Builder: () => (/* binding */ Builder),\n/* harmony export */   END: () => (/* binding */ END),\n/* harmony export */   Identifier: () => (/* binding */ Identifier),\n/* harmony export */   Parameter: () => (/* binding */ Parameter),\n/* harmony export */   arrayParser: () => (/* binding */ arrayParser),\n/* harmony export */   arraySerializer: () => (/* binding */ arraySerializer),\n/* harmony export */   camel: () => (/* binding */ camel),\n/* harmony export */   escapeIdentifier: () => (/* binding */ escapeIdentifier),\n/* harmony export */   fromCamel: () => (/* binding */ fromCamel),\n/* harmony export */   fromKebab: () => (/* binding */ fromKebab),\n/* harmony export */   fromPascal: () => (/* binding */ fromPascal),\n/* harmony export */   handleValue: () => (/* binding */ handleValue),\n/* harmony export */   inferType: () => (/* binding */ inferType),\n/* harmony export */   kebab: () => (/* binding */ kebab),\n/* harmony export */   mergeUserTypes: () => (/* binding */ mergeUserTypes),\n/* harmony export */   parsers: () => (/* binding */ parsers),\n/* harmony export */   pascal: () => (/* binding */ pascal),\n/* harmony export */   serializers: () => (/* binding */ serializers),\n/* harmony export */   stringify: () => (/* binding */ stringify),\n/* harmony export */   toCamel: () => (/* binding */ toCamel),\n/* harmony export */   toKebab: () => (/* binding */ toKebab),\n/* harmony export */   toPascal: () => (/* binding */ toPascal),\n/* harmony export */   types: () => (/* binding */ types)\n/* harmony export */ });\n/* harmony import */ var _query_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./query.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/query.js");\n/* harmony import */ var _errors_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors.js */ "(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/errors.js");\n\n\nconst types = {\n    string: {\n        to: 25,\n        from: null,\n        serialize: (x)=>"" + x\n    },\n    number: {\n        to: 0,\n        from: [\n            21,\n            23,\n            26,\n            700,\n            701\n        ],\n        serialize: (x)=>"" + x,\n        parse: (x)=>+x\n    },\n    json: {\n        to: 114,\n        from: [\n            114,\n            3802\n        ],\n        serialize: (x)=>JSON.stringify(x),\n        parse: (x)=>JSON.parse(x)\n    },\n    boolean: {\n        to: 16,\n        from: 16,\n        serialize: (x)=>x === true ? "t" : "f",\n        parse: (x)=>x === "t"\n    },\n    date: {\n        to: 1184,\n        from: [\n            1082,\n            1114,\n            1184\n        ],\n        serialize: (x)=>(x instanceof Date ? x : new Date(x)).toISOString(),\n        parse: (x)=>new Date(x)\n    },\n    bytea: {\n        to: 17,\n        from: 17,\n        serialize: (x)=>"\\\\x" + Buffer.from(x).toString("hex"),\n        parse: (x)=>Buffer.from(x.slice(2), "hex")\n    }\n};\nclass NotTagged {\n    then() {\n        notTagged();\n    }\n    catch() {\n        notTagged();\n    }\n    finally() {\n        notTagged();\n    }\n}\nclass Identifier extends NotTagged {\n    constructor(value){\n        super();\n        this.value = escapeIdentifier(value);\n    }\n}\nclass Parameter extends NotTagged {\n    constructor(value, type, array){\n        super();\n        this.value = value;\n        this.type = type;\n        this.array = array;\n    }\n}\nclass Builder extends NotTagged {\n    constructor(first, rest){\n        super();\n        this.first = first;\n        this.rest = rest;\n    }\n    build(before, parameters, types, options) {\n        const keyword = builders.map(([x, fn])=>({\n                fn,\n                i: before.search(x)\n            })).sort((a, b)=>a.i - b.i).pop();\n        return keyword.i === -1 ? escapeIdentifiers(this.first, options) : keyword.fn(this.first, this.rest, parameters, types, options);\n    }\n}\nfunction handleValue(x, parameters, types, options) {\n    let value = x instanceof Parameter ? x.value : x;\n    if (value === undefined) {\n        x instanceof Parameter ? x.value = options.transform.undefined : value = x = options.transform.undefined;\n        if (value === undefined) throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.Errors.generic("UNDEFINED_VALUE", "Undefined values are not allowed");\n    }\n    return "$" + types.push(x instanceof Parameter ? (parameters.push(x.value), x.array ? x.array[x.type || inferType(x.value)] || x.type || firstIsString(x.value) : x.type) : (parameters.push(x), inferType(x)));\n}\nconst defaultHandlers = typeHandlers(types);\nfunction stringify(q, string, value, parameters, types, options) {\n    for(let i = 1; i < q.strings.length; i++){\n        string += stringifyValue(string, value, parameters, types, options) + q.strings[i];\n        value = q.args[i];\n    }\n    return string;\n}\nfunction stringifyValue(string, value, parameters, types, o) {\n    return value instanceof Builder ? value.build(string, parameters, types, o) : value instanceof _query_js__WEBPACK_IMPORTED_MODULE_0__.Query ? fragment(value, parameters, types, o) : value instanceof Identifier ? value.value : value && value[0] instanceof _query_js__WEBPACK_IMPORTED_MODULE_0__.Query ? value.reduce((acc, x)=>acc + " " + fragment(x, parameters, types, o), "") : handleValue(value, parameters, types, o);\n}\nfunction fragment(q, parameters, types, options) {\n    q.fragment = true;\n    return stringify(q, q.strings[0], q.args[0], parameters, types, options);\n}\nfunction valuesBuilder(first, parameters, types, columns, options) {\n    return first.map((row)=>"(" + columns.map((column)=>stringifyValue("values", row[column], parameters, types, options)).join(",") + ")").join(",");\n}\nfunction values(first, rest, parameters, types, options) {\n    const multi = Array.isArray(first[0]);\n    const columns = rest.length ? rest.flat() : Object.keys(multi ? first[0] : first);\n    return valuesBuilder(multi ? first : [\n        first\n    ], parameters, types, columns, options);\n}\nfunction select(first, rest, parameters, types, options) {\n    typeof first === "string" && (first = [\n        first\n    ].concat(rest));\n    if (Array.isArray(first)) return escapeIdentifiers(first, options);\n    let value;\n    const columns = rest.length ? rest.flat() : Object.keys(first);\n    return columns.map((x)=>{\n        value = first[x];\n        return (value instanceof _query_js__WEBPACK_IMPORTED_MODULE_0__.Query ? fragment(value, parameters, types, options) : value instanceof Identifier ? value.value : handleValue(value, parameters, types, options)) + " as " + escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x);\n    }).join(",");\n}\nconst builders = Object.entries({\n    values,\n    in: (...xs)=>{\n        const x = values(...xs);\n        return x === "()" ? "(null)" : x;\n    },\n    select,\n    as: select,\n    returning: select,\n    "\\\\(": select,\n    update (first, rest, parameters, types, options) {\n        return (rest.length ? rest.flat() : Object.keys(first)).map((x)=>escapeIdentifier(options.transform.column.to ? options.transform.column.to(x) : x) + "=" + stringifyValue("values", first[x], parameters, types, options));\n    },\n    insert (first, rest, parameters, types, options) {\n        const columns = rest.length ? rest.flat() : Object.keys(Array.isArray(first) ? first[0] : first);\n        return "(" + escapeIdentifiers(columns, options) + ")values" + valuesBuilder(Array.isArray(first) ? first : [\n            first\n        ], parameters, types, columns, options);\n    }\n}).map(([x, fn])=>[\n        new RegExp("((?:^|[\\\\s(])" + x + "(?:$|[\\\\s(]))(?![\\\\s\\\\S]*\\\\1)", "i"),\n        fn\n    ]);\nfunction notTagged() {\n    throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.Errors.generic("NOT_TAGGED_CALL", "Query not called as a tagged template literal");\n}\nconst serializers = defaultHandlers.serializers;\nconst parsers = defaultHandlers.parsers;\nconst END = {};\nfunction firstIsString(x) {\n    if (Array.isArray(x)) return firstIsString(x[0]);\n    return typeof x === "string" ? 1009 : 0;\n}\nconst mergeUserTypes = function(types) {\n    const user = typeHandlers(types || {});\n    return {\n        serializers: Object.assign({}, serializers, user.serializers),\n        parsers: Object.assign({}, parsers, user.parsers)\n    };\n};\nfunction typeHandlers(types) {\n    return Object.keys(types).reduce((acc, k)=>{\n        types[k].from && [].concat(types[k].from).forEach((x)=>acc.parsers[x] = types[k].parse);\n        if (types[k].serialize) {\n            acc.serializers[types[k].to] = types[k].serialize;\n            types[k].from && [].concat(types[k].from).forEach((x)=>acc.serializers[x] = types[k].serialize);\n        }\n        return acc;\n    }, {\n        parsers: {},\n        serializers: {}\n    });\n}\nfunction escapeIdentifiers(xs, { transform: { column } }) {\n    return xs.map((x)=>escapeIdentifier(column.to ? column.to(x) : x)).join(",");\n}\nconst escapeIdentifier = function escape(str) {\n    return \'"\' + str.replace(/"/g, \'""\').replace(/\\./g, \'"."\') + \'"\';\n};\nconst inferType = function inferType(x) {\n    return x instanceof Parameter ? x.type : x instanceof Date ? 1184 : x instanceof Uint8Array ? 17 : x === true || x === false ? 16 : typeof x === "bigint" ? 20 : Array.isArray(x) ? inferType(x[0]) : 0;\n};\nconst escapeBackslash = /\\\\/g;\nconst escapeQuote = /"/g;\nfunction arrayEscape(x) {\n    return x.replace(escapeBackslash, "\\\\\\\\").replace(escapeQuote, \'\\\\"\');\n}\nconst arraySerializer = function arraySerializer(xs, serializer, options, typarray) {\n    if (Array.isArray(xs) === false) return xs;\n    if (!xs.length) return "{}";\n    const first = xs[0];\n    // Only _box (1020) has the \';\' delimiter for arrays, all other types use the \',\' delimiter\n    const delimiter = typarray === 1020 ? ";" : ",";\n    if (Array.isArray(first) && !first.type) return "{" + xs.map((x)=>arraySerializer(x, serializer, options, typarray)).join(delimiter) + "}";\n    return "{" + xs.map((x)=>{\n        if (x === undefined) {\n            x = options.transform.undefined;\n            if (x === undefined) throw _errors_js__WEBPACK_IMPORTED_MODULE_1__.Errors.generic("UNDEFINED_VALUE", "Undefined values are not allowed");\n        }\n        return x === null ? "null" : \'"\' + arrayEscape(serializer ? serializer(x.type ? x.value : x) : "" + x) + \'"\';\n    }).join(delimiter) + "}";\n};\nconst arrayParserState = {\n    i: 0,\n    char: null,\n    str: "",\n    quoted: false,\n    last: 0\n};\nconst arrayParser = function arrayParser(x, parser, typarray) {\n    arrayParserState.i = arrayParserState.last = 0;\n    return arrayParserLoop(arrayParserState, x, parser, typarray);\n};\nfunction arrayParserLoop(s, x, parser, typarray) {\n    const xs = [];\n    // Only _box (1020) has the \';\' delimiter for arrays, all other types use the \',\' delimiter\n    const delimiter = typarray === 1020 ? ";" : ",";\n    for(; s.i < x.length; s.i++){\n        s.char = x[s.i];\n        if (s.quoted) {\n            if (s.char === "\\\\") {\n                s.str += x[++s.i];\n            } else if (s.char === \'"\') {\n                xs.push(parser ? parser(s.str) : s.str);\n                s.str = "";\n                s.quoted = x[s.i + 1] === \'"\';\n                s.last = s.i + 2;\n            } else {\n                s.str += s.char;\n            }\n        } else if (s.char === \'"\') {\n            s.quoted = true;\n        } else if (s.char === "{") {\n            s.last = ++s.i;\n            xs.push(arrayParserLoop(s, x, parser, typarray));\n        } else if (s.char === "}") {\n            s.quoted = false;\n            s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i));\n            s.last = s.i + 1;\n            break;\n        } else if (s.char === delimiter && s.p !== "}" && s.p !== \'"\') {\n            xs.push(parser ? parser(x.slice(s.last, s.i)) : x.slice(s.last, s.i));\n            s.last = s.i + 1;\n        }\n        s.p = s.char;\n    }\n    s.last < s.i && xs.push(parser ? parser(x.slice(s.last, s.i + 1)) : x.slice(s.last, s.i + 1));\n    return xs;\n}\nconst toCamel = (x)=>{\n    let str = x[0];\n    for(let i = 1; i < x.length; i++)str += x[i] === "_" ? x[++i].toUpperCase() : x[i];\n    return str;\n};\nconst toPascal = (x)=>{\n    let str = x[0].toUpperCase();\n    for(let i = 1; i < x.length; i++)str += x[i] === "_" ? x[++i].toUpperCase() : x[i];\n    return str;\n};\nconst toKebab = (x)=>x.replace(/_/g, "-");\nconst fromCamel = (x)=>x.replace(/([A-Z])/g, "_$1").toLowerCase();\nconst fromPascal = (x)=>(x.slice(0, 1) + x.slice(1).replace(/([A-Z])/g, "_$1")).toLowerCase();\nconst fromKebab = (x)=>x.replace(/-/g, "_");\nfunction createJsonTransform(fn) {\n    return function jsonTransform(x, column) {\n        return typeof x === "object" && x !== null && (column.type === 114 || column.type === 3802) ? Array.isArray(x) ? x.map((x)=>jsonTransform(x, column)) : Object.entries(x).reduce((acc, [k, v])=>Object.assign(acc, {\n                [fn(k)]: jsonTransform(v, column)\n            }), {}) : x;\n    };\n}\ntoCamel.column = {\n    from: toCamel\n};\ntoCamel.value = {\n    from: createJsonTransform(toCamel)\n};\nfromCamel.column = {\n    to: fromCamel\n};\nconst camel = {\n    ...toCamel\n};\ncamel.column.to = fromCamel;\ntoPascal.column = {\n    from: toPascal\n};\ntoPascal.value = {\n    from: createJsonTransform(toPascal)\n};\nfromPascal.column = {\n    to: fromPascal\n};\nconst pascal = {\n    ...toPascal\n};\npascal.column.to = fromPascal;\ntoKebab.column = {\n    from: toKebab\n};\ntoKebab.value = {\n    from: createJsonTransform(toKebab)\n};\nfromKebab.column = {\n    to: fromKebab\n};\nconst kebab = {\n    ...toKebab\n};\nkebab.column.to = fromKebab;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/postgres@3.4.3/node_modules/postgres/src/types.js\n',
      );

      /***/
    },
};
